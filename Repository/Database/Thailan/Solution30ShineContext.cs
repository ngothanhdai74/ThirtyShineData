// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Repository.Database.Thailan.Tables;

namespace Repository.Database.Thailan
{
    public partial class Solution30ShineContext : DbContext
    {
        public Solution30ShineContext()
        {
        }

        public Solution30ShineContext(DbContextOptions<Solution30ShineContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ApiDeviceManager> ApiDeviceManager { get; set; }
        public virtual DbSet<ApiHairMode> ApiHairMode { get; set; }
        public virtual DbSet<ApiHairModeLevel> ApiHairModeLevel { get; set; }
        public virtual DbSet<ApiHairModeStaff> ApiHairModeStaff { get; set; }
        public virtual DbSet<ApiNotiSendManager> ApiNotiSendManager { get; set; }
        public virtual DbSet<ApiSlide> ApiSlide { get; set; }
        public virtual DbSet<ApiStaffVideo> ApiStaffVideo { get; set; }
        public virtual DbSet<ApiVideo> ApiVideo { get; set; }
        public virtual DbSet<ApiVideoTv> ApiVideoTv { get; set; }
        public virtual DbSet<Application> Application { get; set; }
        public virtual DbSet<Appointment> Appointment { get; set; }
        public virtual DbSet<Authorization> Authorization { get; set; }
        public virtual DbSet<BackupTableServiceSalonConfig> BackupTableServiceSalonConfig { get; set; }
        public virtual DbSet<BillConfirm> BillConfirm { get; set; }
        public virtual DbSet<BillService> BillService { get; set; }
        public virtual DbSet<BillUploadedImages> BillUploadedImages { get; set; }
        public virtual DbSet<BillWaitAtSalon> BillWaitAtSalon { get; set; }
        public virtual DbSet<BookHour> BookHour { get; set; }
        public virtual DbSet<BookHour2ndSub> BookHour2ndSub { get; set; }
        public virtual DbSet<BookHourSub> BookHourSub { get; set; }
        public virtual DbSet<Booking> Booking { get; set; }
        public virtual DbSet<BookingChangeStylist> BookingChangeStylist { get; set; }
        public virtual DbSet<BookingHis> BookingHis { get; set; }
        public virtual DbSet<BookingLog> BookingLog { get; set; }
        public virtual DbSet<BookingRequest> BookingRequest { get; set; }
        public virtual DbSet<BookingSalonBackup> BookingSalonBackup { get; set; }
        public virtual DbSet<BookingSpecialOptionTick> BookingSpecialOptionTick { get; set; }
        public virtual DbSet<BookingStatisticSlot> BookingStatisticSlot { get; set; }
        public virtual DbSet<BookingStatus> BookingStatus { get; set; }
        public virtual DbSet<BookingStylistBackup> BookingStylistBackup { get; set; }
        public virtual DbSet<BookingSuggest> BookingSuggest { get; set; }
        public virtual DbSet<BookingSuggestSalonConfig> BookingSuggestSalonConfig { get; set; }
        public virtual DbSet<BookingSwitchVersion> BookingSwitchVersion { get; set; }
        public virtual DbSet<BookingTest> BookingTest { get; set; }
        public virtual DbSet<Brands> Brands { get; set; }
        public virtual DbSet<Call> Call { get; set; }
        public virtual DbSet<CallBackRequest> CallBackRequest { get; set; }
        public virtual DbSet<CheckinCheckout> CheckinCheckout { get; set; }
        public virtual DbSet<ConfigMembership> ConfigMembership { get; set; }
        public virtual DbSet<ConfigPartTime> ConfigPartTime { get; set; }
        public virtual DbSet<ConfigQuantifyProduct> ConfigQuantifyProduct { get; set; }
        public virtual DbSet<Contracts> Contracts { get; set; }
        public virtual DbSet<CrmVoucherWaitTime> CrmVoucherWaitTime { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<CustomerAppRating> CustomerAppRating { get; set; }
        public virtual DbSet<CustomerBookingCheck> CustomerBookingCheck { get; set; }
        public virtual DbSet<CustomerHairAttribute> CustomerHairAttribute { get; set; }
        public virtual DbSet<CustomerHairModeBill> CustomerHairModeBill { get; set; }
        public virtual DbSet<CustomerHairSkin> CustomerHairSkin { get; set; }
        public virtual DbSet<CustomerHairSkinHistory> CustomerHairSkinHistory { get; set; }
        public virtual DbSet<CustomerRating> CustomerRating { get; set; }
        public virtual DbSet<CustomerRatingUuDai> CustomerRatingUuDai { get; set; }
        public virtual DbSet<CustomerTag> CustomerTag { get; set; }
        public virtual DbSet<CustomerToken> CustomerToken { get; set; }
        public virtual DbSet<CustomerType> CustomerType { get; set; }
        public virtual DbSet<CustomerUuDai> CustomerUuDai { get; set; }
        public virtual DbSet<DcustomerAtSalon> DcustomerAtSalon { get; set; }
        public virtual DbSet<DcustomerCall> DcustomerCall { get; set; }
        public virtual DbSet<DcustomerInfo> DcustomerInfo { get; set; }
        public virtual DbSet<DcustomerProduct> DcustomerProduct { get; set; }
        public virtual DbSet<DcustomerProductTotal> DcustomerProductTotal { get; set; }
        public virtual DbSet<DcustomerScore> DcustomerScore { get; set; }
        public virtual DbSet<DcustomerService> DcustomerService { get; set; }
        public virtual DbSet<DcustomerServiceTotal> DcustomerServiceTotal { get; set; }
        public virtual DbSet<DcustomerSms> DcustomerSms { get; set; }
        public virtual DbSet<DcustomerTeamService> DcustomerTeamService { get; set; }
        public virtual DbSet<DeleteBookingBillLog> DeleteBookingBillLog { get; set; }
        public virtual DbSet<Device> Device { get; set; }
        public virtual DbSet<DstylistScore> DstylistScore { get; set; }
        public virtual DbSet<ErpCheck3S> ErpCheck3S { get; set; }
        public virtual DbSet<ErpCheckCsvc> ErpCheckCsvc { get; set; }
        public virtual DbSet<ErpItemCheck> ErpItemCheck { get; set; }
        public virtual DbSet<ErrorCutHair> ErrorCutHair { get; set; }
        public virtual DbSet<ErrorCutReason> ErrorCutReason { get; set; }
        public virtual DbSet<ExportGoods> ExportGoods { get; set; }
        public virtual DbSet<FeedbackPointService> FeedbackPointService { get; set; }
        public virtual DbSet<FlowGoods> FlowGoods { get; set; }
        public virtual DbSet<FlowProduct> FlowProduct { get; set; }
        public virtual DbSet<FlowPromotion> FlowPromotion { get; set; }
        public virtual DbSet<FlowSalary> FlowSalary { get; set; }
        public virtual DbSet<FlowService> FlowService { get; set; }
        public virtual DbSet<FlowStaff> FlowStaff { get; set; }
        public virtual DbSet<FlowTimeKeeping> FlowTimeKeeping { get; set; }
        public virtual DbSet<FlowTimeKeepingHis> FlowTimeKeepingHis { get; set; }
        public virtual DbSet<FundAccountType> FundAccountType { get; set; }
        public virtual DbSet<FundImport> FundImport { get; set; }
        public virtual DbSet<FundItemFlow> FundItemFlow { get; set; }
        public virtual DbSet<FundOffenItem> FundOffenItem { get; set; }
        public virtual DbSet<FundSource> FundSource { get; set; }
        public virtual DbSet<HairAttribute> HairAttribute { get; set; }
        public virtual DbSet<HairAttributeProduct> HairAttributeProduct { get; set; }
        public virtual DbSet<HairStyle> HairStyle { get; set; }
        public virtual DbSet<ImageData> ImageData { get; set; }
        public virtual DbSet<InventoryData> InventoryData { get; set; }
        public virtual DbSet<InventoryFlow> InventoryFlow { get; set; }
        public virtual DbSet<InventoryFlowHc> InventoryFlowHc { get; set; }
        public virtual DbSet<InventoryHc> InventoryHc { get; set; }
        public virtual DbSet<InventoryImport> InventoryImport { get; set; }
        public virtual DbSet<IvCheckOut> IvCheckOut { get; set; }
        public virtual DbSet<IvCheckOutDetail> IvCheckOutDetail { get; set; }
        public virtual DbSet<IvInventory> IvInventory { get; set; }
        public virtual DbSet<IvInventoryControl> IvInventoryControl { get; set; }
        public virtual DbSet<IvInventoryCurrent> IvInventoryCurrent { get; set; }
        public virtual DbSet<IvInventoryHistory> IvInventoryHistory { get; set; }
        public virtual DbSet<IvInventoryInitial> IvInventoryInitial { get; set; }
        public virtual DbSet<IvInventoryMaxService> IvInventoryMaxService { get; set; }
        public virtual DbSet<IvOrder> IvOrder { get; set; }
        public virtual DbSet<IvOrderDetail> IvOrderDetail { get; set; }
        public virtual DbSet<IvOrderNum> IvOrderNum { get; set; }
        public virtual DbSet<IvProductQuantify> IvProductQuantify { get; set; }
        public virtual DbSet<IvRouting> IvRouting { get; set; }
        public virtual DbSet<IvStatisticsProductSold> IvStatisticsProductSold { get; set; }
        public virtual DbSet<KcsCheck3S> KcsCheck3S { get; set; }
        public virtual DbSet<KcsFaceType> KcsFaceType { get; set; }
        public virtual DbSet<KetQuaKinhDoanhFlowImport> KetQuaKinhDoanhFlowImport { get; set; }
        public virtual DbSet<KetQuaKinhDoanhItemImport> KetQuaKinhDoanhItemImport { get; set; }
        public virtual DbSet<KetQuaKinhDoanhSalon> KetQuaKinhDoanhSalon { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<ManagerLog> ManagerLog { get; set; }
        public virtual DbSet<ManagerLogBefore> ManagerLogBefore { get; set; }
        public virtual DbSet<MapDeviceOwner> MapDeviceOwner { get; set; }
        public virtual DbSet<MarketingChiPhiPhanBo> MarketingChiPhiPhanBo { get; set; }
        public virtual DbSet<MarketingChienDich> MarketingChienDich { get; set; }
        public virtual DbSet<MarketingChiphiItem> MarketingChiphiItem { get; set; }
        public virtual DbSet<MarketingChiphingay> MarketingChiphingay { get; set; }
        public virtual DbSet<MarkettingNganSach> MarkettingNganSach { get; set; }
        public virtual DbSet<MemberLog> MemberLog { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<MktCampaign> MktCampaign { get; set; }
        public virtual DbSet<MktCampaignBill> MktCampaignBill { get; set; }
        public virtual DbSet<MktCampaignCustomer> MktCampaignCustomer { get; set; }
        public virtual DbSet<MktCampaignService> MktCampaignService { get; set; }
        public virtual DbSet<MktCampaignUsed> MktCampaignUsed { get; set; }
        public virtual DbSet<MktVoucher> MktVoucher { get; set; }
        public virtual DbSet<Mobile> Mobile { get; set; }
        public virtual DbSet<MonitorCategoryError> MonitorCategoryError { get; set; }
        public virtual DbSet<MonitorHandle> MonitorHandle { get; set; }
        public virtual DbSet<MonitorStaffError> MonitorStaffError { get; set; }
        public virtual DbSet<NetworkOperator> NetworkOperator { get; set; }
        public virtual DbSet<NotificationManagement> NotificationManagement { get; set; }
        public virtual DbSet<NotificationUsers> NotificationUsers { get; set; }
        public virtual DbSet<OperationReportConfig> OperationReportConfig { get; set; }
        public virtual DbSet<OperationReportStatistic> OperationReportStatistic { get; set; }
        public virtual DbSet<OrderBrokenDeviceHandling> OrderBrokenDeviceHandling { get; set; }
        public virtual DbSet<OrderBrokenDeviceHandlingLog> OrderBrokenDeviceHandlingLog { get; set; }
        public virtual DbSet<OrderRecruitingStaff> OrderRecruitingStaff { get; set; }
        public virtual DbSet<OrderRecruitingStaffLog> OrderRecruitingStaffLog { get; set; }
        public virtual DbSet<PayMethod> PayMethod { get; set; }
        public virtual DbSet<PermissionAction> PermissionAction { get; set; }
        public virtual DbSet<PermissionActionMapApi> PermissionActionMapApi { get; set; }
        public virtual DbSet<PermissionApi> PermissionApi { get; set; }
        public virtual DbSet<PermissionDefaultPage> PermissionDefaultPage { get; set; }
        public virtual DbSet<PermissionErp> PermissionErp { get; set; }
        public virtual DbSet<PermissionMenu> PermissionMenu { get; set; }
        public virtual DbSet<PermissionMenuAction> PermissionMenuAction { get; set; }
        public virtual DbSet<PermissionSalonArea> PermissionSalonArea { get; set; }
        public virtual DbSet<PermissionStaff> PermissionStaff { get; set; }
        public virtual DbSet<PreviewImagesReport> PreviewImagesReport { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductReturn> ProductReturn { get; set; }
        public virtual DbSet<ProductUsedStatistic> ProductUsedStatistic { get; set; }
        public virtual DbSet<QlkhoSalonOrder> QlkhoSalonOrder { get; set; }
        public virtual DbSet<QlkhoSalonOrderFlow> QlkhoSalonOrderFlow { get; set; }
        public virtual DbSet<QlkhoSalonOrderStatus> QlkhoSalonOrderStatus { get; set; }
        public virtual DbSet<QuanHuyen> QuanHuyen { get; set; }
        public virtual DbSet<RatingBonus> RatingBonus { get; set; }
        public virtual DbSet<RatingConfigPoint> RatingConfigPoint { get; set; }
        public virtual DbSet<RatingDetail> RatingDetail { get; set; }
        public virtual DbSet<RatingDetailV1> RatingDetailV1 { get; set; }
        public virtual DbSet<RatingIsCheck> RatingIsCheck { get; set; }
        public virtual DbSet<RatingReason> RatingReason { get; set; }
        public virtual DbSet<RatingTemp> RatingTemp { get; set; }
        public virtual DbSet<RealtimeFirebaseTokenId> RealtimeFirebaseTokenId { get; set; }
        public virtual DbSet<SalaryConfig> SalaryConfig { get; set; }
        public virtual DbSet<SalaryConfigStaff> SalaryConfigStaff { get; set; }
        public virtual DbSet<SalaryIncome> SalaryIncome { get; set; }
        public virtual DbSet<SalaryIncomeChange> SalaryIncomeChange { get; set; }
        public virtual DbSet<SalonDailyCost> SalonDailyCost { get; set; }
        public virtual DbSet<SalonProduct> SalonProduct { get; set; }
        public virtual DbSet<SalonService> SalonService { get; set; }
        public virtual DbSet<SalonTarget> SalonTarget { get; set; }
        public virtual DbSet<SalonTypeConfig> SalonTypeConfig { get; set; }
        public virtual DbSet<ScriptData> ScriptData { get; set; }
        public virtual DbSet<ScscCategory> ScscCategory { get; set; }
        public virtual DbSet<ScscCheckError> ScscCheckError { get; set; }
        public virtual DbSet<SelfieCode> SelfieCode { get; set; }
        public virtual DbSet<Service> Service { get; set; }
        public virtual DbSet<ServiceRating> ServiceRating { get; set; }
        public virtual DbSet<ServiceRatingRelationship> ServiceRatingRelationship { get; set; }
        public virtual DbSet<ServiceSalonConfig> ServiceSalonConfig { get; set; }
        public virtual DbSet<ServiceSalonGoldTime> ServiceSalonGoldTime { get; set; }
        public virtual DbSet<ServiceSalonTypeConfig> ServiceSalonTypeConfig { get; set; }
        public virtual DbSet<ServiceTemp> ServiceTemp { get; set; }
        public virtual DbSet<ShineMemberUpdate> ShineMemberUpdate { get; set; }
        public virtual DbSet<Skill> Skill { get; set; }
        public virtual DbSet<SkillConfig> SkillConfig { get; set; }
        public virtual DbSet<SkinAttribute> SkinAttribute { get; set; }
        public virtual DbSet<SkinAttributeProduct> SkinAttributeProduct { get; set; }
        public virtual DbSet<SmBillTemp> SmBillTemp { get; set; }
        public virtual DbSet<SmBillTempFlowProduct> SmBillTempFlowProduct { get; set; }
        public virtual DbSet<SmBillTempFlowService> SmBillTempFlowService { get; set; }
        public virtual DbSet<SmBookingTemp> SmBookingTemp { get; set; }
        public virtual DbSet<SmBookingTempHis> SmBookingTempHis { get; set; }
        public virtual DbSet<SmEnrollTemp> SmEnrollTemp { get; set; }
        public virtual DbSet<SmEnrollTempHour> SmEnrollTempHour { get; set; }
        public virtual DbSet<SocialThread> SocialThread { get; set; }
        public virtual DbSet<SpecialCusDetail> SpecialCusDetail { get; set; }
        public virtual DbSet<SpecialCustomer> SpecialCustomer { get; set; }
        public virtual DbSet<Staff> Staff { get; set; }
        public virtual DbSet<StaffAutoCondition> StaffAutoCondition { get; set; }
        public virtual DbSet<StaffAutoLevelLog> StaffAutoLevelLog { get; set; }
        public virtual DbSet<StaffAutoLevelup> StaffAutoLevelup { get; set; }
        public virtual DbSet<StaffAvatar> StaffAvatar { get; set; }
        public virtual DbSet<StaffBillServiceDetail> StaffBillServiceDetail { get; set; }
        public virtual DbSet<StaffContractMap> StaffContractMap { get; set; }
        public virtual DbSet<StaffErrorSpecailCus> StaffErrorSpecailCus { get; set; }
        public virtual DbSet<StaffFavoriteProductService> StaffFavoriteProductService { get; set; }
        public virtual DbSet<StaffFluctuations> StaffFluctuations { get; set; }
        public virtual DbSet<StaffMistake> StaffMistake { get; set; }
        public virtual DbSet<StaffProcedure> StaffProcedure { get; set; }
        public virtual DbSet<StaffProfileMap> StaffProfileMap { get; set; }
        public virtual DbSet<StaffRanking> StaffRanking { get; set; }
        public virtual DbSet<StaffRoll> StaffRoll { get; set; }
        public virtual DbSet<StaffSalonHistory> StaffSalonHistory { get; set; }
        public virtual DbSet<StaffTarget> StaffTarget { get; set; }
        public virtual DbSet<StaffType> StaffType { get; set; }
        public virtual DbSet<StaticExpense> StaticExpense { get; set; }
        public virtual DbSet<StaticOperate> StaticOperate { get; set; }
        public virtual DbSet<StaticRatingWaitTime> StaticRatingWaitTime { get; set; }
        public virtual DbSet<StaticServicesProfit> StaticServicesProfit { get; set; }
        public virtual DbSet<StatictisReportOperation> StatictisReportOperation { get; set; }
        public virtual DbSet<StatisticSalaryProduct> StatisticSalaryProduct { get; set; }
        public virtual DbSet<StatisticSalaryService> StatisticSalaryService { get; set; }
        public virtual DbSet<StatisticScscError> StatisticScscError { get; set; }
        public virtual DbSet<StatisticsXuatVatTu> StatisticsXuatVatTu { get; set; }
        public virtual DbSet<StyleMaster> StyleMaster { get; set; }
        public virtual DbSet<StyleMasterLog> StyleMasterLog { get; set; }
        public virtual DbSet<StyleMasterStatus> StyleMasterStatus { get; set; }
        public virtual DbSet<Stylist4MenBillCutFree> Stylist4MenBillCutFree { get; set; }
        public virtual DbSet<Stylist4MenClass> Stylist4MenClass { get; set; }
        public virtual DbSet<Stylist4MenCredits> Stylist4MenCredits { get; set; }
        public virtual DbSet<Stylist4MenCustomer> Stylist4MenCustomer { get; set; }
        public virtual DbSet<Stylist4MenExam> Stylist4MenExam { get; set; }
        public virtual DbSet<Stylist4MenExamResult> Stylist4MenExamResult { get; set; }
        public virtual DbSet<Stylist4MenGraduationScore> Stylist4MenGraduationScore { get; set; }
        public virtual DbSet<Stylist4MenPointClubs> Stylist4MenPointClubs { get; set; }
        public virtual DbSet<Stylist4MenStudent> Stylist4MenStudent { get; set; }
        public virtual DbSet<Stylist4MenStudyPackage> Stylist4MenStudyPackage { get; set; }
        public virtual DbSet<Stylist4MenTuition> Stylist4MenTuition { get; set; }
        public virtual DbSet<SuKienTeam> SuKienTeam { get; set; }
        public virtual DbSet<SuKienTeamStaff> SuKienTeamStaff { get; set; }
        public virtual DbSet<SurveyContent> SurveyContent { get; set; }
        public virtual DbSet<SurveyFeedback> SurveyFeedback { get; set; }
        public virtual DbSet<SurveyMapQa> SurveyMapQa { get; set; }
        public virtual DbSet<TblCategory> TblCategory { get; set; }
        public virtual DbSet<TblConfig> TblConfig { get; set; }
        public virtual DbSet<TblConfigWorkDays> TblConfigWorkDays { get; set; }
        public virtual DbSet<TblCusInputBooking> TblCusInputBooking { get; set; }
        public virtual DbSet<TblEmailReport> TblEmailReport { get; set; }
        public virtual DbSet<TblFormMisstake> TblFormMisstake { get; set; }
        public virtual DbSet<TblGroupProduct> TblGroupProduct { get; set; }
        public virtual DbSet<TblInformationStaffClub> TblInformationStaffClub { get; set; }
        public virtual DbSet<TblListBack30Day> TblListBack30Day { get; set; }
        public virtual DbSet<TblMedia> TblMedia { get; set; }
        public virtual DbSet<TblPayon> TblPayon { get; set; }
        public virtual DbSet<TblPermission> TblPermission { get; set; }
        public virtual DbSet<TblPermissionAction> TblPermissionAction { get; set; }
        public virtual DbSet<TblPermissionDefaultPage> TblPermissionDefaultPage { get; set; }
        public virtual DbSet<TblPermissionMap> TblPermissionMap { get; set; }
        public virtual DbSet<TblPermissionMapV2> TblPermissionMapV2 { get; set; }
        public virtual DbSet<TblPermissionMenu> TblPermissionMenu { get; set; }
        public virtual DbSet<TblPermissionMenuV2> TblPermissionMenuV2 { get; set; }
        public virtual DbSet<TblPermissionSalonArea> TblPermissionSalonArea { get; set; }
        public virtual DbSet<TblPermissionStaffRoles> TblPermissionStaffRoles { get; set; }
        public virtual DbSet<TblSalon> TblSalon { get; set; }
        public virtual DbSet<TblSkillLevel> TblSkillLevel { get; set; }
        public virtual DbSet<TblStaffOfClubInformation> TblStaffOfClubInformation { get; set; }
        public virtual DbSet<TblStaffSurvey> TblStaffSurvey { get; set; }
        public virtual DbSet<TblStatus> TblStatus { get; set; }
        public virtual DbSet<TblTemp> TblTemp { get; set; }
        public virtual DbSet<TblTesst> TblTesst { get; set; }
        public virtual DbSet<TeamService> TeamService { get; set; }
        public virtual DbSet<TimekeepingConfig> TimekeepingConfig { get; set; }
        public virtual DbSet<TinhThanh> TinhThanh { get; set; }
        public virtual DbSet<TopSalary> TopSalary { get; set; }
        public virtual DbSet<TrackingWebData> TrackingWebData { get; set; }
        public virtual DbSet<TrackingWebDataV2> TrackingWebDataV2 { get; set; }
        public virtual DbSet<TrackingWebDataV22017> TrackingWebDataV22017 { get; set; }
        public virtual DbSet<TrackingWebEvent> TrackingWebEvent { get; set; }
        public virtual DbSet<TuyenDungDanhGia> TuyenDungDanhGia { get; set; }
        public virtual DbSet<TuyenDungNguoiTest> TuyenDungNguoiTest { get; set; }
        public virtual DbSet<TuyenDungNguon> TuyenDungNguon { get; set; }
        public virtual DbSet<TuyenDungSkill> TuyenDungSkill { get; set; }
        public virtual DbSet<TuyenDungSkillLevel> TuyenDungSkillLevel { get; set; }
        public virtual DbSet<TuyenDungSkillLevelMap> TuyenDungSkillLevelMap { get; set; }
        public virtual DbSet<TuyenDungStatus> TuyenDungStatus { get; set; }
        public virtual DbSet<TuyenDungUngVien> TuyenDungUngVien { get; set; }
        public virtual DbSet<TypeErrorSpecailCus> TypeErrorSpecailCus { get; set; }
        public virtual DbSet<UserStaff> UserStaff { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Vietnam> Vietnam { get; set; }
        public virtual DbSet<WorkTime> WorkTime { get; set; }
        public virtual DbSet<WorkflowFile> WorkflowFile { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=10.0.2.76;Initial Catalog=DbThaiLan;Persist Security Info=True;User ID=ad_30s;Password=VDrs8XHyz3Rdc7PAiv5Q");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ApiDeviceManager>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ApiHairMode>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ApiHairModeLevel>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ApiHairModeStaff>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ApiNotiSendManager>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UserId).HasComment("Id khách hàng đã được gửi");
            });

            modelBuilder.Entity<ApiSlide>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ApiStaffVideo>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ApiVideo>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ApiVideoTv>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Application>(entity =>
            {
                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeleteTime).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.Description).HasDefaultValueSql("('')");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.Name).HasDefaultValueSql("('')");

                entity.Property(e => e.Uid)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.UpdateTime).HasDefaultValueSql("('1970-1-1')");
            });

            modelBuilder.Entity<Appointment>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Authorization>(entity =>
            {
                entity.Property(e => e.ApplicationUid)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeleteTime).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.DeviceName).HasDefaultValueSql("('')");

                entity.Property(e => e.DeviceType).HasDefaultValueSql("('')");

                entity.Property(e => e.DeviceUid)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsForever).HasDefaultValueSql("((0))");

                entity.Property(e => e.Token)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TokenAlg)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TokenExp).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.TokenIss).HasDefaultValueSql("('')");

                entity.Property(e => e.TokenType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Uid)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.UpdateTime).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.UserType).IsUnicode(false);

                entity.Property(e => e.UserUid)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<BillService>(entity =>
            {
                entity.Property(e => e.FeeCod).HasComment("Phí COD (trả cho đối tác vận chuyển) - Bán hàng online");

                entity.Property(e => e.FeeExtra).HasComment("Phí thu thêm (Áp dụng cho bán hàng online, có thể là tiền vận chuyển)");

                entity.Property(e => e.InProcedureTime).HasComment("Mốc thời gian khách bắt đầu bước vào quy trình gội, cắt (Tính từ khi skinner gội đầu và nhập mã nhân viên trên app Staff 30S)");

                entity.Property(e => e.IsImages).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsSulphite).HasComment("Xác nhận làm hóa chất");

                entity.Property(e => e.IsWrongImage).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.QueueCheckoutInfo).IsUnicode(false);

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BillUploadedImages>(entity =>
            {
                entity.Property(e => e.BillId).ValueGeneratedNever();
            });

            modelBuilder.Entity<BillWaitAtSalon>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookHour>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookHour2ndSub>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Publish).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Booking>(entity =>
            {
                entity.Property(e => e.BookingDynamoId).IsUnicode(false);

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Os).HasComment("Nguồn booking : 1|Web, 2|Android, 3|iOS");

                entity.Property(e => e.SuggestSalonId).HasComment("Salon gợi ý khách đến salon hiện tại được book");

                entity.Property(e => e.TextNote1).HasComment("Ghi chú của Khách hàng khi book lịch");

                entity.Property(e => e.TextNote2).HasComment("Ghi chú của Khách hàng khi book lịch (Khách update trên trang cảm ơn)");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingChangeStylist>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingHis>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingLog>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<BookingRequest>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CustomerPhone).IsUnicode(false);
            });

            modelBuilder.Entity<BookingSalonBackup>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingSpecialOptionTick>(entity =>
            {
                entity.Property(e => e.ConfigKey).IsUnicode(false);
            });

            modelBuilder.Entity<BookingStatisticSlot>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingStatus>(entity =>
            {
                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeleteTime).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.Description).HasDefaultValueSql("('')");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Name).HasDefaultValueSql("('')");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UpdateTime).HasDefaultValueSql("('1970-1-1')");
            });

            modelBuilder.Entity<BookingStylistBackup>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingSuggest>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingSuggestSalonConfig>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingSwitchVersion>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingTest>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Brands>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Call>(entity =>
            {
                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.Length).HasDefaultValueSql("((1))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Receiver).HasDefaultValueSql("('')");

                entity.Property(e => e.Sender).HasDefaultValueSql("('')");

                entity.Property(e => e.Seq).HasDefaultValueSql("((0))");

                entity.Property(e => e.StartTime).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UpdateTime).HasDefaultValueSql("('1970-1-1')");
            });

            modelBuilder.Entity<CallBackRequest>(entity =>
            {
                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CheckinCheckout>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ConfigPartTime>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ConfigQuantifyProduct>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DepartmentId).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPublish).HasDefaultValueSql("((1))");

                entity.Property(e => e.ProductId).HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantify).HasDefaultValueSql("((0))");

                entity.Property(e => e.ServiceId).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalNumberService).HasDefaultValueSql("((0))");

                entity.Property(e => e.Volume).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Contracts>(entity =>
            {
                entity.Property(e => e.Content).HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DepartmentId).HasDefaultValueSql("((0))");

                entity.Property(e => e.DescriptionContract).HasDefaultValueSql("('')");

                entity.Property(e => e.Name).HasDefaultValueSql("('')");

                entity.Property(e => e.PathContract).HasDefaultValueSql("('')");

                entity.Property(e => e.TypeContract).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CrmVoucherWaitTime>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.Property(e => e.MemberType).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CustomerAppRating>(entity =>
            {
                entity.HasKey(e => e.BillId)
                    .HasName("PK__Customer__11F2FC6A1BE9DBF5");

                entity.Property(e => e.BillId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CustomerBookingCheck>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CustomerHairAttribute>(entity =>
            {
                entity.Property(e => e.AnMac).HasDefaultValueSql("('')");

                entity.Property(e => e.ChatToc).HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CustomerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.DangCam).HasDefaultValueSql("('')");

                entity.Property(e => e.DoCung).HasDefaultValueSql("('')");

                entity.Property(e => e.GhiChuKhac).HasDefaultValueSql("('')");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.KhuonMat).HasDefaultValueSql("('')");

                entity.Property(e => e.NgheNghiep).HasDefaultValueSql("('')");

                entity.Property(e => e.ThoiQuenSay).HasDefaultValueSql("('')");

                entity.Property(e => e.ThoiQuenVuotSap).HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<CustomerHairModeBill>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CustomerHairSkin>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CustomerHairSkinHistory>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CustomerRating>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CustomerRatingUuDai>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CustomerToken>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CustomerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.CustomerPhone).IsUnicode(false);

                entity.Property(e => e.Imei).IsUnicode(false);

                entity.Property(e => e.Token).IsUnicode(false);
            });

            modelBuilder.Entity<CustomerType>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CustomerUuDai>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<DcustomerAtSalon>(entity =>
            {
                entity.HasKey(e => new { e.IdCustomerAtSalon, e.BillId });

                entity.Property(e => e.IdCustomerAtSalon).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<DcustomerInfo>(entity =>
            {
                entity.HasKey(e => new { e.CustomerId, e.CustomerPhone });

                entity.Property(e => e.CustomerPhone).IsUnicode(false);

                entity.Property(e => e.CustomerGender).HasDefaultValueSql("((1))");

                entity.Property(e => e.TotalMoneyOfBill).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalOfBill).HasDefaultValueSql("((0))");

                entity.Property(e => e.UsedToPayByCard).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<DcustomerScore>(entity =>
            {
                entity.HasKey(e => new { e.IdCustomerScore, e.BillId });

                entity.Property(e => e.IdCustomerScore).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<DcustomerService>(entity =>
            {
                entity.Property(e => e.VoucherPercent).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<DcustomerTeamService>(entity =>
            {
                entity.Property(e => e.BillId).ValueGeneratedNever();

                entity.Property(e => e.IdCustomerTeamService).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Device>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ErpCheck3S>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ErpCheckCsvc>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ErpItemCheck>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ErrorCutHair>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ErrorCutReason>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ExportGoods>(entity =>
            {
                entity.Property(e => e.ExportId).HasComment("Id người xuất hàng");

                entity.Property(e => e.GoodsIds).HasComment("Danh sách Id hàng hóa (dạng json)");

                entity.Property(e => e.Level).HasComment("Cấp độ xuất hàng : 1|Kho xuất cho salon, 2|Salon xuất cho thợ");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RecipientId).HasComment("Id người nhận hàng");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FeedbackPointService>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FeedbackQuantity).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalonId).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<FlowGoods>(entity =>
            {
                entity.Property(e => e.Cost).HasComment("Giá gốc");

                entity.Property(e => e.GoodsId).HasComment("Id của vật tư");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Price).HasComment("Giá");

                entity.Property(e => e.PromotionMoney).HasComment("Tiền khuyễn mãi");

                entity.Property(e => e.Quantity).HasComment("Số lượng");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.VoucherPercent).HasComment("% Khuyến mãi");
            });

            modelBuilder.Entity<FlowProduct>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FlowPromotion>(entity =>
            {
                entity.Property(e => e.Group).HasComment(@"Nhóm : ví dụ như Sản phẩm, Dịch vụ...

| 1 : Dịch vụ (Cạo mặt, Lấy ráy tai...) |");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FlowSalary>(entity =>
            {
                entity.Property(e => e.AllowanceSalary).HasComment("Lương phụ cấp");

                entity.Property(e => e.FixSalary).HasComment("Lương cứng");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.PartTimeSalary).HasComment("Lương part-time (lương theo giờ)");

                entity.Property(e => e.ProductSalary).HasComment("Lương mỹ phẩm");

                entity.Property(e => e.SDate).HasComment("Ngày store dữ liệu (dữ liệu lương được store theo từng ngày)");

                entity.Property(e => e.ServiceSalary).HasComment("Lương dịch vụ");

                entity.Property(e => e.StaffId).HasComment("ID nhân viên");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FlowService>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FlowStaff>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FlowTimeKeeping>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Type).HasComment("Kiểu lưu dữ liệu: 1|Điểm danh theo ngày, 2|Giờ làm part-time");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FlowTimeKeepingHis>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FundAccountType>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FundImport>(entity =>
            {
                entity.Property(e => e.AccountTypeId).HasComment("Id tài khoản : Quỹ tiền mặt hay tài khoản ngân hàng");

                entity.Property(e => e.IsReceipt).HasComment("Trạng thái có phải thu hay không. True | Thu, False | Chi");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.SourceId).HasComment("Id nguồn");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FundItemFlow>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FundOffenItem>(entity =>
            {
                entity.Property(e => e.Id).HasComment("Bảng danh sách các chi tiêu thường xuyên");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Money).HasComment("Lượng tiền sử dụng trong khoản thu/chi này");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FundSource>(entity =>
            {
                entity.Property(e => e.Id).HasComment("Nguồn tiền như salon, mỹ phẩm, đào tạo...");

                entity.Property(e => e.Hint).HasComment("Đánh dấu,'salon' | kiểu nguồn là salon");

                entity.Property(e => e.Key).HasComment("Giá trị đi kèm cùng Hint");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<HairAttribute>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<HairAttributeProduct>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<HairStyle>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ImageData>(entity =>
            {
                entity.Property(e => e.BeforeMassageImage).IsUnicode(false);

                entity.Property(e => e.ChemicalUseCard).IsUnicode(false);

                entity.Property(e => e.IsAuto).HasDefaultValueSql("((1))");

                entity.Property(e => e.ParkingHelpImage).IsUnicode(false);
            });

            modelBuilder.Entity<InventoryData>(entity =>
            {
                entity.Property(e => e.InvenData).HasComment("Lượng sản phẩm tồn hiện tại (= Tồn nhập - Lượng bán). Sang ngày hôm sau, đây sẽ là giá trị tồn kho cuối ngày hôm trước");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<InventoryFlow>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<InventoryFlowHc>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<InventoryHc>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<InventoryImport>(entity =>
            {
                entity.Property(e => e.DoId).HasComment("Id người nhập liệu");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RecipientId).HasComment("Id người nhận");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<IvInventory>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeliveryHoursAfterOrderDate).HasDefaultValueSql("((42))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IvInventoryCurrent>(entity =>
            {
                entity.Property(e => e.AccountingDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Begin).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.End).HasDefaultValueSql("((0))");

                entity.Property(e => e.Export).HasDefaultValueSql("((0))");

                entity.Property(e => e.Import).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellOrUse).HasDefaultValueSql("((0))");

                entity.Property(e => e.SuggestOrder).HasDefaultValueSql("((0))");

                entity.Property(e => e.VolumeRemain).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IvInventoryHistory>(entity =>
            {
                entity.Property(e => e.AccountingDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Begin).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.End).HasDefaultValueSql("((0))");

                entity.Property(e => e.Export).HasDefaultValueSql("((0))");

                entity.Property(e => e.Import).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantify).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellOrUse).HasDefaultValueSql("((0))");

                entity.Property(e => e.SuggestOrder).HasDefaultValueSql("((0))");

                entity.Property(e => e.Volume).HasDefaultValueSql("((0))");

                entity.Property(e => e.VolumeRemain).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IvInventoryInitial>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Initial).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IvOrder>(entity =>
            {
                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.CosmeticType).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Imgs).IsUnicode(false);

                entity.Property(e => e.IsAuto).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderType).HasDefaultValueSql("((1))");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdOrder).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdReceive).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdReview).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IvOrderDetail>(entity =>
            {
                entity.Property(e => e.Cost).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsAuto).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityExport).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityImport).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityOrder).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantitySuggest).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityType1).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityType2).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityType3).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityType4).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityType5).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalonReason).HasDefaultValueSql("((1))");

                entity.Property(e => e.Whreason).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<IvOrderNum>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IvProductQuantify>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsPublish).HasDefaultValueSql("((1))");

                entity.Property(e => e.Quantify).HasDefaultValueSql("((0))");

                entity.Property(e => e.StaffType).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalNumberService).HasDefaultValueSql("((0))");

                entity.Property(e => e.Volume).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IvStatisticsProductSold>(entity =>
            {
                entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<KcsCheck3S>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<KcsFaceType>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<KetQuaKinhDoanhFlowImport>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<KetQuaKinhDoanhItemImport>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<KetQuaKinhDoanhSalon>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<MapDeviceOwner>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<MarketingChiPhiPhanBo>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<MarketingChienDich>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<MarketingChiphiItem>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<MarketingChiphingay>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<MarkettingNganSach>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<MemberLog>(entity =>
            {
                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeleteTime).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Receiver).HasDefaultValueSql("('')");

                entity.Property(e => e.SendTime).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.Sender).HasDefaultValueSql("('')");

                entity.Property(e => e.Seq).HasDefaultValueSql("((1))");

                entity.Property(e => e.Text).HasDefaultValueSql("('')");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UpdateTime).HasDefaultValueSql("('1970-1-1')");
            });

            modelBuilder.Entity<MktCampaign>(entity =>
            {
                entity.Property(e => e.CampaignMaxUsage).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CustomerType).HasDefaultValueSql("((0))");

                entity.Property(e => e.Description).HasDefaultValueSql("('')");

                entity.Property(e => e.EndDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.Label).HasDefaultValueSql("(N'')");

                entity.Property(e => e.Name).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ServiceType).HasDefaultValueSql("((1))");

                entity.Property(e => e.StartDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Type).HasDefaultValueSql("((3))");
            });

            modelBuilder.Entity<MktCampaignBill>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MktCampaignCustomer>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MktCampaignService>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MoneyDeductions).HasDefaultValueSql("((0))");

                entity.Property(e => e.MoneyPrePaid).HasDefaultValueSql("((0))");

                entity.Property(e => e.TimesUsed).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<MktCampaignUsed>(entity =>
            {
                entity.HasKey(e => e.CampaignId)
                    .HasName("PK__MktCampa__3F5E8A9980B99D20");

                entity.Property(e => e.CampaignId).ValueGeneratedNever();
            });

            modelBuilder.Entity<MktVoucher>(entity =>
            {
                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Mobile>(entity =>
            {
                entity.Property(e => e.AppKey).IsUnicode(false);
            });

            modelBuilder.Entity<MonitorCategoryError>(entity =>
            {
                entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TypeError).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<MonitorHandle>(entity =>
            {
                entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MonitorStaffError>(entity =>
            {
                entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ErpErrorHandle).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<NetworkOperator>(entity =>
            {
                entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsResend).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Phone).IsUnicode(false);

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<NotificationManagement>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Descriptions).HasDefaultValueSql("('')");

                entity.Property(e => e.Images).HasDefaultValueSql("('')");

                entity.Property(e => e.IsPublish).HasDefaultValueSql("((1))");

                entity.Property(e => e.Name).HasDefaultValueSql("('')");

                entity.Property(e => e.Title).HasDefaultValueSql("('')");

                entity.Property(e => e.Type).HasDefaultValueSql("((0))");

                entity.Property(e => e.Url).HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<NotificationUsers>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsPublish).HasDefaultValueSql("((1))");

                entity.Property(e => e.NotiId).HasDefaultValueSql("((0))");

                entity.Property(e => e.SlugKey).HasDefaultValueSql("('')");

                entity.Property(e => e.UserId).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<OperationReportStatistic>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PayMethod>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<PermissionAction>(entity =>
            {
                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<PermissionApi>(entity =>
            {
                entity.Property(e => e.ApiPath).IsUnicode(false);

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PermissionErp>(entity =>
            {
                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasDefaultValueSql("('')");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedTime).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.Name).HasDefaultValueSql("('')");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<PermissionMenu>(entity =>
            {
                entity.Property(e => e.ClassTag).IsUnicode(false);

                entity.Property(e => e.IconImage).IsUnicode(false);

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<PermissionMenuAction>(entity =>
            {
                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<PermissionSalonArea>(entity =>
            {
                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<PermissionStaff>(entity =>
            {
                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<PreviewImagesReport>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.BarCode).IsUnicode(false);

                entity.Property(e => e.CoefficientOfWaitingDays).HasDefaultValueSql("((1))");

                entity.Property(e => e.InventoryType).IsUnicode(false);

                entity.Property(e => e.MemberCode).IsUnicode(false);

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ProductUsedStatistic>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OrderNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductId).HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantify).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantifyDefault).HasDefaultValueSql("((0))");

                entity.Property(e => e.ServiceId).HasDefaultValueSql("((0))");

                entity.Property(e => e.SlugKey).HasDefaultValueSql("('')");

                entity.Property(e => e.StaffId).HasDefaultValueSql("((0))");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.WorkDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<QlkhoSalonOrder>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<QlkhoSalonOrderFlow>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<QlkhoSalonOrderStatus>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<QuanHuyen>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<RatingBonus>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<RatingConfigPoint>(entity =>
            {
                entity.Property(e => e.ConventionName).HasComment("Tên gọi mức điểm, ví dụ : 1(0 theo quy ước) | Không hài lòng, 2 | Hài lòng, 3 | Rất hài lòng");

                entity.Property(e => e.ConventionPoint).HasComment("Điểm quy ước, ví dụ : điểm lưu vào bill là 1, quy ước là 0. 2|3, 3|10");

                entity.Property(e => e.Hint).HasComment("Chỉ dấu : 1|Bộ quy ước điểm đánh giá nhân viên từ khách theo bill, 2|Bộ quy ước điểm đánh giá nhân viên từ khảo sát");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RealPoint).HasComment("Điểm được lưu vào bill, ví dụ từ 1 -> 5");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<RatingDetail>(entity =>
            {
                entity.Property(e => e.IsAuto).HasDefaultValueSql("((1))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RatingReason8).HasDefaultValueSql("((0))");

                entity.Property(e => e.SatisfactionReasons).IsUnicode(false);

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<RatingDetailV1>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<RatingIsCheck>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<RatingReason>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<RatingTemp>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<RealtimeFirebaseTokenId>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SalaryConfig>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SalaryConfigStaff>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SalaryIncome>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RatingPoint).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SalaryIncomeChange>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SalonDailyCost>(entity =>
            {
                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SalonService>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ScscCategory>(entity =>
            {
                entity.HasKey(e => e.IdScscCate)
                    .HasName("PK_SCSC_Error");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ScscCheckError>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.BillServiceId });

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SelfieCode>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.Property(e => e.MapIdService).IsUnicode(false);

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ServiceRating>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Slug).IsUnicode(false);

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ServiceRatingRelationship>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ServiceSalonGoldTime>(entity =>
            {
                entity.Property(e => e.CoefficientGolden).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HoursId).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPublish).HasDefaultValueSql("((1))");

                entity.Property(e => e.ServiceSalonConfigId).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ServiceTemp>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SkinAttribute>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SkinAttributeProduct>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SmBillTemp>(entity =>
            {
                entity.Property(e => e.BookingId).HasComment("Booking ID");

                entity.Property(e => e.CustomerId).HasComment("Khách hàng ID");

                entity.Property(e => e.FeeCod).HasComment("Phí COD (trả cho đối tác vận chuyển) - Bán hàng online");

                entity.Property(e => e.FeeExtra).HasComment("Phí thu thêm (Áp dụng cho bán hàng online, có thể là tiền vận chuyển)");

                entity.Property(e => e.Images).HasComment("Ảnh khách hàng");

                entity.Property(e => e.InProcedureTime).HasComment("Mốc thời gian khách bắt đầu bước vào quy trình gội, cắt (Tính từ khi skinner gội đầu và nhập mã nhân viên trên app Staff 30S)");

                entity.Property(e => e.InProcedureTimeModifed).HasComment("Thời gian sửa mốc khách vào gội lần cuối cùng");

                entity.Property(e => e.IsOnline).HasComment("Trạng thái bill có phải online hay ko");

                entity.Property(e => e.IsPayByCard).HasComment("Khách có thanh toán bằng Card hay ko");

                entity.Property(e => e.IsX2).HasComment("Có tính nhân đôi cho nhân viên hay không");

                entity.Property(e => e.Mark).HasComment("Điểm đánh giá");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Note).HasComment("Ghi chú");

                entity.Property(e => e.Paid).HasComment("Trạng thái đã thanh toán hay chưa");

                entity.Property(e => e.PayMethodId).HasComment("Phương thức thanh toán ID");

                entity.Property(e => e.ProductIds).HasComment("JSON mảng Sản phẩm");

                entity.Property(e => e.ReceptionId).HasComment("Lễ tân (Checkin) ID");

                entity.Property(e => e.SalonId).HasComment("Salon ID");

                entity.Property(e => e.SellerId).HasComment("NV bán mỹ phẩm ID");

                entity.Property(e => e.ServiceIds).HasComment("JSON mảng Dịch vụ");

                entity.Property(e => e.StaffHairMassageId).HasComment("Skinner ID");

                entity.Property(e => e.StaffHairdresserId).HasComment("Stylist ID");

                entity.Property(e => e.TotalMoney).HasComment("Tổng số tiền");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SmBillTempFlowProduct>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SmBillTempFlowService>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SmBookingTemp>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Os).HasComment("Nguồn booking : 1|Web, 2|Android, 3|iOS");

                entity.Property(e => e.SuggestSalonId).HasComment("Salon gợi ý khách đến salon hiện tại được book");

                entity.Property(e => e.TextNote1).HasComment("Ghi chú của Khách hàng khi book lịch");

                entity.Property(e => e.TextNote2).HasComment("Ghi chú của Khách hàng khi book lịch (Khách update trên trang cảm ơn)");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SmBookingTempHis>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SmEnrollTemp>(entity =>
            {
                entity.Property(e => e.IsEnroll).HasComment("Trạng thái điểm danh : True | Điểm danh, False | Không điểm danh");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalonId).HasComment("Salon ID");

                entity.Property(e => e.StaffId).HasComment("Nhân viên ID");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.WorkDate).HasComment("Ngày làm việc");
            });

            modelBuilder.Entity<SmEnrollTempHour>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SocialThread>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.StType).HasComment("Kiểu nguồn thông tin : 1|Nguồn thông tin biết đến cửa hàng, 2|Nguồn thông tin khảo sát nhân viên");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SpecialCusDetail>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SpecialCustomer>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Staff>(entity =>
            {
                entity.Property(e => e.Code).IsFixedLength();

                entity.Property(e => e.IsActiveBooking).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffAutoCondition>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffAutoLevelLog>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffAutoLevelup>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffBillServiceDetail>(entity =>
            {
                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ServiceBonus).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StaffContractMap>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsReceived).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StaffErrorSpecailCus>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffFluctuations>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffMistake>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffProcedure>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffProfileMap>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<StaffRanking>(entity =>
            {
                entity.Property(e => e.StaffId).ValueGeneratedNever();
            });

            modelBuilder.Entity<StaffRoll>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffSalonHistory>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffType>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaticExpense>(entity =>
            {
                entity.Property(e => e.CapitalSpending).HasDefaultValueSql("((0))");

                entity.Property(e => e.Compensation).HasDefaultValueSql("((0))");

                entity.Property(e => e.DirectFee).HasDefaultValueSql("((0))");

                entity.Property(e => e.ElectricityAndWaterBill).HasDefaultValueSql("((0))");

                entity.Property(e => e.IncomeTaxes).HasDefaultValueSql("((0))");

                entity.Property(e => e.InternetAndPhoneBill).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManageFee).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.NumberOfTurns).HasDefaultValueSql("((0))");

                entity.Property(e => e.OfficeRentAndServiceCose).HasDefaultValueSql("((0))");

                entity.Property(e => e.OfficeStaffSalary).HasDefaultValueSql("((0))");

                entity.Property(e => e.OfficeStaffSocialInsurance).HasDefaultValueSql("((0))");

                entity.Property(e => e.RentWithTax).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalaryServicePerServiceIncome).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalesSalary).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalonFee).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalonUnplannedSpending).HasDefaultValueSql("((0))");

                entity.Property(e => e.ShippingExpend).HasDefaultValueSql("((0))");

                entity.Property(e => e.ShortName).IsFixedLength();

                entity.Property(e => e.SocialInsuranceAndFixedCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.Tax).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalDailyCostInventory).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalIncomeAfterTax).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalPayOffKcs).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalProductCapital).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalProductPerCus).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalServicePerCus).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalSmsexpenses).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalTransactionPerCus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UnplannedSpending).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StaticOperate>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaticRatingWaitTime>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaticServicesProfit>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StatictisReportOperation>(entity =>
            {
                entity.Property(e => e.NumberBill1Star).HasComment("bill danh gia 1 sao");

                entity.Property(e => e.NumberBill2Star).HasComment("bill danh giá 2 sao");

                entity.Property(e => e.NumberBill3Star).HasComment("bill danh gia 3 sao");

                entity.Property(e => e.NumberBill4Star).HasComment("bill danh gia 4 sao");

                entity.Property(e => e.NumberBill5Star).HasComment("bill danh gia 5 sao");

                entity.Property(e => e.NumberBillKhl).HasComment("bill không hài lòng");

                entity.Property(e => e.NumberBillNotImg).HasComment("bill không ảnh");

                entity.Property(e => e.NumberBillWaited).HasComment("Bill Khach phai cho lau > 15 phút");

                entity.Property(e => e.NumberBooking).HasComment("khách dịch vụ đặt trước và checkout");

                entity.Property(e => e.NumberBookingBefor).HasComment("khách booking inline checkout");

                entity.Property(e => e.NumberCanleBooking).HasComment("Số lượng hủy book");

                entity.Property(e => e.NumberCustomerOld).HasComment("Số khách cũ");

                entity.Property(e => e.NumberDeleteBooking).HasComment("Số lượng xóa book");

                entity.Property(e => e.NumberErrorMonitoring).HasComment("Số lỗi giám sát");

                entity.Property(e => e.NumberOfTurns).HasComment("số bill dịch vụ");

                entity.Property(e => e.NumberSkinnerTimekeeping).HasComment("số lượng skinner chấm công");

                entity.Property(e => e.NumberSlotBooking).HasComment("tổng số slot được book");

                entity.Property(e => e.NumberStylist).HasComment("Số lượng stylist đi thuộc biên chế cty");

                entity.Property(e => e.NumberStylistTimekeeping).HasComment("số lượng stylist chấm công");

                entity.Property(e => e.OvertimeHoursStylist).HasComment("Số giờ tăng ca của stylist");

                entity.Property(e => e.SalonId).HasComment("Id của salon");

                entity.Property(e => e.SalonName).HasComment("Tên viết tắt của salon");

                entity.Property(e => e.TotalExFoliation).HasComment("tong so dich vu đắp mặt lạ");

                entity.Property(e => e.TotalGroupColorCombo).HasComment("tong so luong group Color ComBo ( Nhuộm )");

                entity.Property(e => e.TotalGroupUonDuoi).HasComment("tong so bill su dụng group uon + duoi");

                entity.Property(e => e.TotalIncome).HasComment("Tổng doanh thu của salon");

                entity.Property(e => e.TotalKidCombo).HasComment("tong bill dịch vụ Kid Combo");

                entity.Property(e => e.TotalMask).HasComment("tong so dich vu Tay Da Chet");

                entity.Property(e => e.TotalProductIncome).HasComment("tổng doanh thu mỹ phẩm");

                entity.Property(e => e.TotalProtein).HasComment("tong bill dich vu dưỡng Protein");

                entity.Property(e => e.TotalServiceInCome).HasComment("tổng doanh thu dịch vụ");

                entity.Property(e => e.TotalShineCombo).HasComment("tong so bill dich vu ShineCombo");

                entity.Property(e => e.TotalStarNumber).HasComment("tổng số sao đánh giá");

                entity.Property(e => e.WorktimeStylist).HasComment("số giờ làm việc của stylist");
            });

            modelBuilder.Entity<StatisticSalaryProduct>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StatisticSalaryService>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StatisticScscError>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SalonId).HasDefaultValueSql("((0))");

                entity.Property(e => e.StylistId).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongAnhLoiScsc).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongAnhMoScsc).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongAnhUon).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongBillUon).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongDiemScsc).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongErrorComplatetion).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongErrorHairRoots).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongErrorHairTip).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongErrorHairWaves).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongErrorShape).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongErrorSharpNess).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongKhongAnhScsc).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongKhongAnhUon).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongKhongMoScsc).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongLoiScscHoacUon).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongLoiUon).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongMoLechUon).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StatisticsXuatVatTu>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.ExportGoodsId })
                    .HasName("PK_ID_ExportGoods_ID");

                entity.Property(e => e.Id)
                    .HasComment(@"ID : Tự tăng
")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ExportGoodsId).HasComment("0");

                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateXuatVatTu).HasComment("Ngày xuất vật tư");

                entity.Property(e => e.IsDelete)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Cập nhật trạng thái xóa hay không (1 là đã xóa ? 0 là chưa xóa).");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalonId)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Salon được xuất vật tư ");

                entity.Property(e => e.StaffId)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Nhân viên được xuất vật tư");

                entity.Property(e => e.TotalBillXuatVatTu)
                    .HasDefaultValueSql("((0))")
                    .HasComment("tổng bill trong lần xuất vâth tư");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StyleMaster>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.StyleMasterStatusId).HasDefaultValueSql("((2))");

                entity.Property(e => e.TotalLike).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UseCurling).HasDefaultValueSql("((0))");

                entity.Property(e => e.UseHairDye).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StyleMasterLog>(entity =>
            {
                entity.Property(e => e.CustomerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StyleMasterStatus>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenBillCutFree>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenClass>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasComment("Thời gian tạo bản ghi");

                entity.Property(e => e.GraduateTime).HasComment("Ngày tốt nghiệp (Hoàn thành khóa học)");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedTime).HasComment("Thời gian sửa lần gần nhất");

                entity.Property(e => e.Name).HasComment("Tên lớp học");

                entity.Property(e => e.Note).HasComment("Ghi chú");

                entity.Property(e => e.SalonId).HasComment("Trụ sở đào tạo (Sẽ ở 1 salon nào đó)");

                entity.Property(e => e.StartTime).HasComment("Ngày bắt đầu (Khai giảng)");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenCredits>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenCustomer>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenExamResult>(entity =>
            {
                entity.Property(e => e.IsPassPratice).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPassTheory).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Stylist4MenGraduationScore>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenPointClubs>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenStudent>(entity =>
            {
                entity.Property(e => e.Address).HasComment("Địa chỉ cụ thể");

                entity.Property(e => e.CityId).HasComment("Thành phố ID");

                entity.Property(e => e.ClassId).HasComment("Class ID");

                entity.Property(e => e.CreatedTime).HasComment("Thời gian tạo bản ghi");

                entity.Property(e => e.DistrictId).HasComment("Quân/Huyện ID");

                entity.Property(e => e.Email).HasComment("Email (Hoặc tên đăng nhập)");

                entity.Property(e => e.Fullname).HasComment("Tên đầy đủ");

                entity.Property(e => e.Gender).HasComment("Giới tính : 1|Nam, 2|Nữ, 3|Khác");

                entity.Property(e => e.IsDelete).HasComment("True|Đánh dấu bản ghi sang trạng thái xóa");

                entity.Property(e => e.IsGraduate).HasComment("True | Đã tốt nghiệp, False | Chưa tốt nghiệp");

                entity.Property(e => e.IsHire).HasComment("True|Học viên được nhận làm nhân viên của 30Shine");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedTime).HasComment("Thời gian chỉnh sửa bản ghi lần cuối");

                entity.Property(e => e.Password).HasComment("Mật khẩu đăng nhập (App)");

                entity.Property(e => e.Phone).HasComment("Số điện thoại");

                entity.Property(e => e.Publish).HasComment("True|Xuất bản bản ghi, False|Không xuất bản bản ghi");

                entity.Property(e => e.SnDay).HasComment("Ngày sinh");

                entity.Property(e => e.SnMonth).HasComment("Tháng sinh");

                entity.Property(e => e.SnYear).HasComment("Năm sinh");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenStudyPackage>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenTuition>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SuKienTeam>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SuKienTeamStaff>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SurveyContent>(entity =>
            {
                entity.Property(e => e.CategoryId).HasComment("Danh mục khảo sát");

                entity.Property(e => e.Content).HasComment("Nội dung");

                entity.Property(e => e.IsQuestion).HasComment("Là câu hỏi hay câu trả lời : True | Câu hỏi, False | Câu trả lời");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SurveyFeedback>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SurveyMapQa>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblCategory>(entity =>
            {
                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblConfig>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblConfigWorkDays>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Publish).HasDefaultValueSql("((1))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblCusInputBooking>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblEmailReport>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblFormMisstake>(entity =>
            {
                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPuslish).HasDefaultValueSql("((1))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Slug).IsUnicode(false);

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblGroupProduct>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblInformationStaffClub>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblListBack30Day>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblMedia>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPayon>(entity =>
            {
                entity.Property(e => e.BaseSalary).HasComment("Lương cứng");

                entity.Property(e => e.ForeignId).HasComment("Id bậc kỹ năng...");

                entity.Property(e => e.KeyId).HasComment("Id dịch vụ, sản phẩm...");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.PayByTime).HasComment("Cách tính lương cứng : 1 - Theo tháng | 2 - Theo ngày| 3 - Lương part-time | 4 -  Lương phụ cấp | 5 - Hệ số điểm hài lòng | 6 - Hệ số bill | 7 - Hệ số khách quay lại");

                entity.Property(e => e.TypeStaffId).HasComment("Bộ phận nhân viên Id...");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Value).HasComment("Giá trị trả cho nhân viên trên mỗi sản phẩm hoặc dịch vụ");
            });

            modelBuilder.Entity<TblPermission>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPermissionAction>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPermissionDefaultPage>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPermissionMap>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPermissionMapV2>(entity =>
            {
                entity.Property(e => e.AStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPermissionMenu>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPermissionMenuV2>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPermissionSalonArea>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPermissionStaffRoles>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblSalon>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblSkillLevel>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblStaffOfClubInformation>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblStaffSurvey>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblStatus>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblTemp>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblTesst>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TeamService>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TinhThanh>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TopSalary>(entity =>
            {
                entity.Property(e => e.DepartmentId).HasComment("Id bộ phận");

                entity.Property(e => e.Month).HasComment("tháng");

                entity.Property(e => e.Salary).HasComment("Lương");

                entity.Property(e => e.SalonName).HasComment("Tên salon");

                entity.Property(e => e.SkillLevel).HasComment("level");

                entity.Property(e => e.StaffId).HasComment("Id của nhân viên");

                entity.Property(e => e.StaffName).HasComment("Tên nhân viên");

                entity.Property(e => e.Year).HasComment("năm");
            });

            modelBuilder.Entity<TrackingWebData>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TrackingWebDataV2>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.VersionWeb).IsUnicode(false);
            });

            modelBuilder.Entity<TrackingWebDataV22017>(entity =>
            {
                entity.Property(e => e.VersionWeb).IsUnicode(false);
            });

            modelBuilder.Entity<TrackingWebEvent>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TuyenDungDanhGia>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TuyenDungNguoiTest>(entity =>
            {
                entity.Property(e => e.Email).IsFixedLength();

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Telephone).IsFixedLength();

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TuyenDungNguon>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TuyenDungSkill>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TuyenDungSkillLevel>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TuyenDungSkillLevelMap>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TuyenDungStatus>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TuyenDungUngVien>(entity =>
            {
                entity.Property(e => e.Cmt).HasComment("Số Chứng Minh Thư");

                entity.Property(e => e.Cmtimg1).HasComment("Ảnh CMT 1");

                entity.Property(e => e.Cmtimg2).HasComment("Ảnh CMT2");

                entity.Property(e => e.ImgSkill1).HasComment("Ảnh kỹ năng");

                entity.Property(e => e.ImgSkill2).HasComment("Ảnh kỹ năng");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Step1Time).HasComment("Thời gian tạo hồ sơ ứng viên, cũng chính là bước 1");

                entity.Property(e => e.Step2Time).HasComment("Thời gian cập nhật ở bước 2, là bước nhập ảnh, link video");

                entity.Property(e => e.StepEndTime).HasComment("Bước cuối cùng, duyệt ứng viên");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.VideoLink).HasComment("Link video kỹ năng, có thể là link youtube");
            });

            modelBuilder.Entity<TypeErrorSpecailCus>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.Property(e => e.FirstLogin).HasDefaultValueSql("((0))");

                entity.Property(e => e.RequiredValid2Fa).HasDefaultValueSql("((1))");

                entity.Property(e => e.Valid2Fa).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<WorkTime>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<WorkflowFile>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}