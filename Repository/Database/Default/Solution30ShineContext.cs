// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Repository.Database.Default.Tables;

namespace Repository.Database.Default
{
    public partial class Solution30ShineContext : DbContext
    {
        public Solution30ShineContext()
        {
        }

        public Solution30ShineContext(DbContextOptions<Solution30ShineContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ApiDeviceManager> ApiDeviceManager { get; set; }
        public virtual DbSet<ApiHairMode> ApiHairMode { get; set; }
        public virtual DbSet<ApiHairModeLevel> ApiHairModeLevel { get; set; }
        public virtual DbSet<ApiHairModeStaff> ApiHairModeStaff { get; set; }
        public virtual DbSet<ApiNotiSendManager> ApiNotiSendManager { get; set; }
        public virtual DbSet<ApiSlide> ApiSlide { get; set; }
        public virtual DbSet<ApiStaffVideo> ApiStaffVideo { get; set; }
        public virtual DbSet<ApiVideo> ApiVideo { get; set; }
        public virtual DbSet<ApiVideoTv> ApiVideoTv { get; set; }
        public virtual DbSet<Application> Application { get; set; }
        public virtual DbSet<Appointment> Appointment { get; set; }
        public virtual DbSet<Authorization> Authorization { get; set; }
        public virtual DbSet<BackupTableServiceSalonConfig> BackupTableServiceSalonConfig { get; set; }
        public virtual DbSet<BillConfirm> BillConfirm { get; set; }
        public virtual DbSet<BillDiscount> BillDiscount { get; set; }
        public virtual DbSet<BillService> BillService { get; set; }
        public virtual DbSet<BillServiceHis> BillServiceHis { get; set; }
        public virtual DbSet<BillServiceHisOld> BillServiceHisOld { get; set; }
        public virtual DbSet<BillServiceHisOld2> BillServiceHisOld2 { get; set; }
        public virtual DbSet<BillServiceTimeData> BillServiceTimeData { get; set; }
        public virtual DbSet<BillTagHis> BillTagHis { get; set; }
        public virtual DbSet<BillUploadedImages> BillUploadedImages { get; set; }
        public virtual DbSet<BillWaitAtSalon> BillWaitAtSalon { get; set; }
        public virtual DbSet<BookHour> BookHour { get; set; }
        public virtual DbSet<BookHour2ndSub> BookHour2ndSub { get; set; }
        public virtual DbSet<BookHourSub> BookHourSub { get; set; }
        public virtual DbSet<Booking> Booking { get; set; }
        public virtual DbSet<BookingAvailable> BookingAvailable { get; set; }
        public virtual DbSet<BookingChangeStylist> BookingChangeStylist { get; set; }
        public virtual DbSet<BookingHis> BookingHis { get; set; }
        public virtual DbSet<BookingLog> BookingLog { get; set; }
        public virtual DbSet<BookingRequest> BookingRequest { get; set; }
        public virtual DbSet<BookingSalonBackup> BookingSalonBackup { get; set; }
        public virtual DbSet<BookingSelectedItems> BookingSelectedItems { get; set; }
        public virtual DbSet<BookingSlotAvailable> BookingSlotAvailable { get; set; }
        public virtual DbSet<BookingSlotTotal> BookingSlotTotal { get; set; }
        public virtual DbSet<BookingSpecialOptionTick> BookingSpecialOptionTick { get; set; }
        public virtual DbSet<BookingStatisticSlot> BookingStatisticSlot { get; set; }
        public virtual DbSet<BookingStatus> BookingStatus { get; set; }
        public virtual DbSet<BookingStylistBackup> BookingStylistBackup { get; set; }
        public virtual DbSet<BookingSuggest> BookingSuggest { get; set; }
        public virtual DbSet<BookingSuggestSalonConfig> BookingSuggestSalonConfig { get; set; }
        public virtual DbSet<BookingSwitchVersion> BookingSwitchVersion { get; set; }
        public virtual DbSet<BookingTest> BookingTest { get; set; }
        public virtual DbSet<Brands> Brands { get; set; }
        public virtual DbSet<Call> Call { get; set; }
        public virtual DbSet<CallBackRequest> CallBackRequest { get; set; }
        public virtual DbSet<CallHis> CallHis { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<CheckAttendance> CheckAttendance { get; set; }
        public virtual DbSet<CheckProductFreeze> CheckProductFreeze { get; set; }
        public virtual DbSet<CheckinCheckout> CheckinCheckout { get; set; }
        public virtual DbSet<ConfigMembership> ConfigMembership { get; set; }
        public virtual DbSet<ConfigPartTime> ConfigPartTime { get; set; }
        public virtual DbSet<ConfigQuantifyProduct> ConfigQuantifyProduct { get; set; }
        public virtual DbSet<Contracts> Contracts { get; set; }
        public virtual DbSet<CrmVoucherWaitTime> CrmVoucherWaitTime { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<CustomerAppRating> CustomerAppRating { get; set; }
        public virtual DbSet<CustomerBookingCheck> CustomerBookingCheck { get; set; }
        public virtual DbSet<CustomerDevice> CustomerDevice { get; set; }
        public virtual DbSet<CustomerFeedBack> CustomerFeedBack { get; set; }
        public virtual DbSet<CustomerHairAttribute> CustomerHairAttribute { get; set; }
        public virtual DbSet<CustomerHairModeBill> CustomerHairModeBill { get; set; }
        public virtual DbSet<CustomerHairModeBillHis> CustomerHairModeBillHis { get; set; }
        public virtual DbSet<CustomerHairSkin> CustomerHairSkin { get; set; }
        public virtual DbSet<CustomerHairSkinHistory> CustomerHairSkinHistory { get; set; }
        public virtual DbSet<CustomerOtpToken> CustomerOtpToken { get; set; }
        public virtual DbSet<CustomerRating> CustomerRating { get; set; }
        public virtual DbSet<CustomerRating1> CustomerRating1 { get; set; }
        public virtual DbSet<CustomerRatingDetail> CustomerRatingDetail { get; set; }
        public virtual DbSet<CustomerRatingUuDai> CustomerRatingUuDai { get; set; }
        public virtual DbSet<CustomerTag> CustomerTag { get; set; }
        public virtual DbSet<CustomerToken> CustomerToken { get; set; }
        public virtual DbSet<CustomerType> CustomerType { get; set; }
        public virtual DbSet<CustomerUuDai> CustomerUuDai { get; set; }
        public virtual DbSet<DcustomerAtSalon> DcustomerAtSalon { get; set; }
        public virtual DbSet<DcustomerCall> DcustomerCall { get; set; }
        public virtual DbSet<DcustomerConsumeHistory> DcustomerConsumeHistory { get; set; }
        public virtual DbSet<DcustomerDetailBillHistory> DcustomerDetailBillHistory { get; set; }
        public virtual DbSet<DcustomerGeneralHistory> DcustomerGeneralHistory { get; set; }
        public virtual DbSet<DcustomerInfo> DcustomerInfo { get; set; }
        public virtual DbSet<DcustomerProduct> DcustomerProduct { get; set; }
        public virtual DbSet<DcustomerProductTotal> DcustomerProductTotal { get; set; }
        public virtual DbSet<DcustomerQueueInfo> DcustomerQueueInfo { get; set; }
        public virtual DbSet<DcustomerScore> DcustomerScore { get; set; }
        public virtual DbSet<DcustomerService> DcustomerService { get; set; }
        public virtual DbSet<DcustomerServiceTotal> DcustomerServiceTotal { get; set; }
        public virtual DbSet<DcustomerSms> DcustomerSms { get; set; }
        public virtual DbSet<DcustomerTeamService> DcustomerTeamService { get; set; }
        public virtual DbSet<DeleteBookingBillLog> DeleteBookingBillLog { get; set; }
        public virtual DbSet<Device> Device { get; set; }
        public virtual DbSet<DstylistScore> DstylistScore { get; set; }
        public virtual DbSet<EquipmentDepartments> EquipmentDepartments { get; set; }
        public virtual DbSet<EquipmentGroups> EquipmentGroups { get; set; }
        public virtual DbSet<EquipmentSalons> EquipmentSalons { get; set; }
        public virtual DbSet<EquipmentSuppliers> EquipmentSuppliers { get; set; }
        public virtual DbSet<Equipments> Equipments { get; set; }
        public virtual DbSet<ErpCheck3S> ErpCheck3S { get; set; }
        public virtual DbSet<ErpCheckCsvc> ErpCheckCsvc { get; set; }
        public virtual DbSet<ErpItemCheck> ErpItemCheck { get; set; }
        public virtual DbSet<ErrorCutHair> ErrorCutHair { get; set; }
        public virtual DbSet<ErrorCutReason> ErrorCutReason { get; set; }
        public virtual DbSet<ExportGoods> ExportGoods { get; set; }
        public virtual DbSet<FeedbackPointService> FeedbackPointService { get; set; }
        public virtual DbSet<FlowGoods> FlowGoods { get; set; }
        public virtual DbSet<FlowProduct> FlowProduct { get; set; }
        public virtual DbSet<FlowPromotion> FlowPromotion { get; set; }
        public virtual DbSet<FlowSalary> FlowSalary { get; set; }
        public virtual DbSet<FlowService> FlowService { get; set; }
        public virtual DbSet<FlowStaff> FlowStaff { get; set; }
        public virtual DbSet<FlowTimeKeeping> FlowTimeKeeping { get; set; }
        public virtual DbSet<FlowTimeKeepingHis> FlowTimeKeepingHis { get; set; }
        public virtual DbSet<FlowTimeKeepinghisBk20200731> FlowTimeKeepinghisBk20200731 { get; set; }
        public virtual DbSet<FundAccountType> FundAccountType { get; set; }
        public virtual DbSet<FundImport> FundImport { get; set; }
        public virtual DbSet<FundItemFlow> FundItemFlow { get; set; }
        public virtual DbSet<FundOffenItem> FundOffenItem { get; set; }
        public virtual DbSet<FundSource> FundSource { get; set; }
        public virtual DbSet<GamificationGrade> GamificationGrade { get; set; }
        public virtual DbSet<GamificationProfile> GamificationProfile { get; set; }
        public virtual DbSet<GamificationQuest> GamificationQuest { get; set; }
        public virtual DbSet<GamificationQuestStaff> GamificationQuestStaff { get; set; }
        public virtual DbSet<GamificationStaffGrade> GamificationStaffGrade { get; set; }
        public virtual DbSet<HairAttribute> HairAttribute { get; set; }
        public virtual DbSet<HairAttributeProduct> HairAttributeProduct { get; set; }
        public virtual DbSet<HairStyle> HairStyle { get; set; }
        public virtual DbSet<ImageData> ImageData { get; set; }
        public virtual DbSet<InventoryData> InventoryData { get; set; }
        public virtual DbSet<InventoryFlow> InventoryFlow { get; set; }
        public virtual DbSet<InventoryFlowHc> InventoryFlowHc { get; set; }
        public virtual DbSet<InventoryHc> InventoryHc { get; set; }
        public virtual DbSet<InventoryImport> InventoryImport { get; set; }
        public virtual DbSet<IvCheckOut> IvCheckOut { get; set; }
        public virtual DbSet<IvCheckOutDetail> IvCheckOutDetail { get; set; }
        public virtual DbSet<IvGroupQuantifyProductV2> IvGroupQuantifyProductV2 { get; set; }
        public virtual DbSet<IvGroupQuantifyV2> IvGroupQuantifyV2 { get; set; }
        public virtual DbSet<IvInventory> IvInventory { get; set; }
        public virtual DbSet<IvInventoryCheckLog> IvInventoryCheckLog { get; set; }
        public virtual DbSet<IvInventoryCheckTime> IvInventoryCheckTime { get; set; }
        public virtual DbSet<IvInventoryCheckTimeService> IvInventoryCheckTimeService { get; set; }
        public virtual DbSet<IvInventoryControl> IvInventoryControl { get; set; }
        public virtual DbSet<IvInventoryCurrent> IvInventoryCurrent { get; set; }
        public virtual DbSet<IvInventoryCurrentLog> IvInventoryCurrentLog { get; set; }
        public virtual DbSet<IvInventoryCurrentTrace> IvInventoryCurrentTrace { get; set; }
        public virtual DbSet<IvInventoryHistory> IvInventoryHistory { get; set; }
        public virtual DbSet<IvInventoryInitial> IvInventoryInitial { get; set; }
        public virtual DbSet<IvInventoryLog> IvInventoryLog { get; set; }
        public virtual DbSet<IvInventoryMaxService> IvInventoryMaxService { get; set; }
        public virtual DbSet<IvMaxProductInventoryNorms> IvMaxProductInventoryNorms { get; set; }
        public virtual DbSet<IvMaxProductInventoryNormsHistory> IvMaxProductInventoryNormsHistory { get; set; }
        public virtual DbSet<IvMaxServiceInventoryNorms> IvMaxServiceInventoryNorms { get; set; }
        public virtual DbSet<IvMaxServiceInventoryNormsHistory> IvMaxServiceInventoryNormsHistory { get; set; }
        public virtual DbSet<IvOrder> IvOrder { get; set; }
        public virtual DbSet<IvOrderDetail> IvOrderDetail { get; set; }
        public virtual DbSet<IvOrderNum> IvOrderNum { get; set; }
        public virtual DbSet<IvProductQuantify> IvProductQuantify { get; set; }
        public virtual DbSet<IvProductQuantifyV2> IvProductQuantifyV2 { get; set; }
        public virtual DbSet<IvQuantifyChosen> IvQuantifyChosen { get; set; }
        public virtual DbSet<IvRouting> IvRouting { get; set; }
        public virtual DbSet<IvServiceQuantifyV2> IvServiceQuantifyV2 { get; set; }
        public virtual DbSet<IvStatisticsProductSold> IvStatisticsProductSold { get; set; }
        public virtual DbSet<KcsCheck3S> KcsCheck3S { get; set; }
        public virtual DbSet<KcsFaceType> KcsFaceType { get; set; }
        public virtual DbSet<KetQuaKinhDoanhFlowImport> KetQuaKinhDoanhFlowImport { get; set; }
        public virtual DbSet<KetQuaKinhDoanhItemImport> KetQuaKinhDoanhItemImport { get; set; }
        public virtual DbSet<KetQuaKinhDoanhSalon> KetQuaKinhDoanhSalon { get; set; }
        public virtual DbSet<KpiCriterias> KpiCriterias { get; set; }
        public virtual DbSet<KpiDataDays> KpiDataDays { get; set; }
        public virtual DbSet<KpiDataMonths> KpiDataMonths { get; set; }
        public virtual DbSet<KpiDetailRatings> KpiDetailRatings { get; set; }
        public virtual DbSet<KpiDetailScsc> KpiDetailScsc { get; set; }
        public virtual DbSet<KpiPointMappings> KpiPointMappings { get; set; }
        public virtual DbSet<KpiPropertyPoints> KpiPropertyPoints { get; set; }
        public virtual DbSet<KpiSalonPoints> KpiSalonPoints { get; set; }
        public virtual DbSet<KpiSalons> KpiSalons { get; set; }
        public virtual DbSet<LockBlock> LockBlock { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<ManagerLog> ManagerLog { get; set; }
        public virtual DbSet<ManagerLogBefore> ManagerLogBefore { get; set; }
        public virtual DbSet<MapDeviceOwner> MapDeviceOwner { get; set; }
        public virtual DbSet<MarketingChiPhiPhanBo> MarketingChiPhiPhanBo { get; set; }
        public virtual DbSet<MarketingChienDich> MarketingChienDich { get; set; }
        public virtual DbSet<MarketingChiphiItem> MarketingChiphiItem { get; set; }
        public virtual DbSet<MarketingChiphingay> MarketingChiphingay { get; set; }
        public virtual DbSet<MarkettingNganSach> MarkettingNganSach { get; set; }
        public virtual DbSet<MemberLog> MemberLog { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<MktCampaign> MktCampaign { get; set; }
        public virtual DbSet<MktCampaignBill> MktCampaignBill { get; set; }
        public virtual DbSet<MktCampaignCustomer> MktCampaignCustomer { get; set; }
        public virtual DbSet<MktCampaignProduct> MktCampaignProduct { get; set; }
        public virtual DbSet<MktCampaignService> MktCampaignService { get; set; }
        public virtual DbSet<MktCampaignUsed> MktCampaignUsed { get; set; }
        public virtual DbSet<MktVoucher> MktVoucher { get; set; }
        public virtual DbSet<Mobile> Mobile { get; set; }
        public virtual DbSet<MonitorCategoryError> MonitorCategoryError { get; set; }
        public virtual DbSet<MonitorHandle> MonitorHandle { get; set; }
        public virtual DbSet<MonitorStaffError> MonitorStaffError { get; set; }
        public virtual DbSet<NetworkOperator> NetworkOperator { get; set; }
        public virtual DbSet<NotificationManagement> NotificationManagement { get; set; }
        public virtual DbSet<NotificationUsers> NotificationUsers { get; set; }
        public virtual DbSet<NotificationUsers191113> NotificationUsers191113 { get; set; }
        public virtual DbSet<NotificationUsersBk> NotificationUsersBk { get; set; }
        public virtual DbSet<OperationReportConfig> OperationReportConfig { get; set; }
        public virtual DbSet<OperationReportStatistic> OperationReportStatistic { get; set; }
        public virtual DbSet<OrderBrokenDeviceHandling> OrderBrokenDeviceHandling { get; set; }
        public virtual DbSet<OrderBrokenDeviceHandlingLog> OrderBrokenDeviceHandlingLog { get; set; }
        public virtual DbSet<OrderRecruitingStaff> OrderRecruitingStaff { get; set; }
        public virtual DbSet<OrderRecruitingStaffLog> OrderRecruitingStaffLog { get; set; }
        public virtual DbSet<PayMethod> PayMethod { get; set; }
        public virtual DbSet<PermissionAction> PermissionAction { get; set; }
        public virtual DbSet<PermissionActionMapApi> PermissionActionMapApi { get; set; }
        public virtual DbSet<PermissionApi> PermissionApi { get; set; }
        public virtual DbSet<PermissionDefaultPage> PermissionDefaultPage { get; set; }
        public virtual DbSet<PermissionErp> PermissionErp { get; set; }
        public virtual DbSet<PermissionMenu> PermissionMenu { get; set; }
        public virtual DbSet<PermissionMenuAction> PermissionMenuAction { get; set; }
        public virtual DbSet<PermissionSalonArea> PermissionSalonArea { get; set; }
        public virtual DbSet<PermissionStaff> PermissionStaff { get; set; }
        public virtual DbSet<PreviewImagesReport> PreviewImagesReport { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductReturn> ProductReturn { get; set; }
        public virtual DbSet<ProductReturnExplanation> ProductReturnExplanation { get; set; }
        public virtual DbSet<ProductUsedStatistic> ProductUsedStatistic { get; set; }
        public virtual DbSet<QlkhoSalonOrder> QlkhoSalonOrder { get; set; }
        public virtual DbSet<QlkhoSalonOrderFlow> QlkhoSalonOrderFlow { get; set; }
        public virtual DbSet<QlkhoSalonOrderStatus> QlkhoSalonOrderStatus { get; set; }
        public virtual DbSet<QuanHuyen> QuanHuyen { get; set; }
        public virtual DbSet<RatingAnswer> RatingAnswer { get; set; }
        public virtual DbSet<RatingBonus> RatingBonus { get; set; }
        public virtual DbSet<RatingConfig> RatingConfig { get; set; }
        public virtual DbSet<RatingConfigAnswer> RatingConfigAnswer { get; set; }
        public virtual DbSet<RatingConfigPoint> RatingConfigPoint { get; set; }
        public virtual DbSet<RatingDetail> RatingDetail { get; set; }
        public virtual DbSet<RatingDetailV1> RatingDetailV1 { get; set; }
        public virtual DbSet<RatingIsCheck> RatingIsCheck { get; set; }
        public virtual DbSet<RatingReason> RatingReason { get; set; }
        public virtual DbSet<RatingTemp> RatingTemp { get; set; }
        public virtual DbSet<RatingType> RatingType { get; set; }
        public virtual DbSet<RealtimeFirebaseTokenId> RealtimeFirebaseTokenId { get; set; }
        public virtual DbSet<ReportProductivity> ReportProductivity { get; set; }
        public virtual DbSet<SalaryConfig> SalaryConfig { get; set; }
        public virtual DbSet<SalaryConfigStaff> SalaryConfigStaff { get; set; }
        public virtual DbSet<SalaryIncome> SalaryIncome { get; set; }
        public virtual DbSet<SalaryIncomeChange> SalaryIncomeChange { get; set; }
        public virtual DbSet<SalonAudit> SalonAudit { get; set; }
        public virtual DbSet<SalonCamera> SalonCamera { get; set; }
        public virtual DbSet<SalonCampaign> SalonCampaign { get; set; }
        public virtual DbSet<SalonDailyCost> SalonDailyCost { get; set; }
        public virtual DbSet<SalonEquipment> SalonEquipment { get; set; }
        public virtual DbSet<SalonEquipmentChange> SalonEquipmentChange { get; set; }
        public virtual DbSet<SalonProduct> SalonProduct { get; set; }
        public virtual DbSet<SalonRanking> SalonRanking { get; set; }
        public virtual DbSet<SalonService> SalonService { get; set; }
        public virtual DbSet<SalonTarget> SalonTarget { get; set; }
        public virtual DbSet<SalonTypeConfig> SalonTypeConfig { get; set; }
        public virtual DbSet<ScriptData> ScriptData { get; set; }
        public virtual DbSet<ScscCategory> ScscCategory { get; set; }
        public virtual DbSet<ScscCheckError> ScscCheckError { get; set; }
        public virtual DbSet<ScscCheckErrorLog> ScscCheckErrorLog { get; set; }
        public virtual DbSet<ScscSalonStaffCheckError> ScscSalonStaffCheckError { get; set; }
        public virtual DbSet<SelfieCode> SelfieCode { get; set; }
        public virtual DbSet<Service> Service { get; set; }
        public virtual DbSet<ServiceRating> ServiceRating { get; set; }
        public virtual DbSet<ServiceRatingRelationship> ServiceRatingRelationship { get; set; }
        public virtual DbSet<ServiceSalonConfig> ServiceSalonConfig { get; set; }
        public virtual DbSet<ServiceSalonGoldTime> ServiceSalonGoldTime { get; set; }
        public virtual DbSet<ServiceSalonTypeConfig> ServiceSalonTypeConfig { get; set; }
        public virtual DbSet<ServiceTemp> ServiceTemp { get; set; }
        public virtual DbSet<ServiceWorkflow> ServiceWorkflow { get; set; }
        public virtual DbSet<ServiceWorkflowStep> ServiceWorkflowStep { get; set; }
        public virtual DbSet<ShineMemberUpdate> ShineMemberUpdate { get; set; }
        public virtual DbSet<Skill> Skill { get; set; }
        public virtual DbSet<SkillConfig> SkillConfig { get; set; }
        public virtual DbSet<SkinAttribute> SkinAttribute { get; set; }
        public virtual DbSet<SkinAttributeProduct> SkinAttributeProduct { get; set; }
        public virtual DbSet<SmBillTemp> SmBillTemp { get; set; }
        public virtual DbSet<SmBillTempFlowProduct> SmBillTempFlowProduct { get; set; }
        public virtual DbSet<SmBillTempFlowService> SmBillTempFlowService { get; set; }
        public virtual DbSet<SmBookingTemp> SmBookingTemp { get; set; }
        public virtual DbSet<SmBookingTempHis> SmBookingTempHis { get; set; }
        public virtual DbSet<SmEnrollTemp> SmEnrollTemp { get; set; }
        public virtual DbSet<SmEnrollTempHour> SmEnrollTempHour { get; set; }
        public virtual DbSet<SocialThread> SocialThread { get; set; }
        public virtual DbSet<SpecialCusDetail> SpecialCusDetail { get; set; }
        public virtual DbSet<SpecialCustomer> SpecialCustomer { get; set; }
        public virtual DbSet<Staff> Staff { get; set; }
        public virtual DbSet<StaffApprovalInfo> StaffApprovalInfo { get; set; }
        public virtual DbSet<StaffAutoCondition> StaffAutoCondition { get; set; }
        public virtual DbSet<StaffAutoLevelLog> StaffAutoLevelLog { get; set; }
        public virtual DbSet<StaffAutoLevelup> StaffAutoLevelup { get; set; }
        public virtual DbSet<StaffAvatar> StaffAvatar { get; set; }
        public virtual DbSet<StaffBillServiceDetail> StaffBillServiceDetail { get; set; }
        public virtual DbSet<StaffContractMap> StaffContractMap { get; set; }
        public virtual DbSet<StaffErrorSpecailCus> StaffErrorSpecailCus { get; set; }
        public virtual DbSet<StaffFavoriteProductService> StaffFavoriteProductService { get; set; }
        public virtual DbSet<StaffFluctuations> StaffFluctuations { get; set; }
        public virtual DbSet<StaffMistake> StaffMistake { get; set; }
        public virtual DbSet<StaffProcedure> StaffProcedure { get; set; }
        public virtual DbSet<StaffProfileMap> StaffProfileMap { get; set; }
        public virtual DbSet<StaffRanking> StaffRanking { get; set; }
        public virtual DbSet<StaffRoll> StaffRoll { get; set; }
        public virtual DbSet<StaffSalonHistory> StaffSalonHistory { get; set; }
        public virtual DbSet<StaffSkillTag> StaffSkillTag { get; set; }
        public virtual DbSet<StaffTarget> StaffTarget { get; set; }
        public virtual DbSet<StaffType> StaffType { get; set; }
        public virtual DbSet<StaffWorkingData> StaffWorkingData { get; set; }
        public virtual DbSet<StaffWorkingState> StaffWorkingState { get; set; }
        public virtual DbSet<StaticCustomer> StaticCustomer { get; set; }
        public virtual DbSet<StaticExpense> StaticExpense { get; set; }
        public virtual DbSet<StaticExpenseV2> StaticExpenseV2 { get; set; }
        public virtual DbSet<StaticOperate> StaticOperate { get; set; }
        public virtual DbSet<StaticRatingWaitTime> StaticRatingWaitTime { get; set; }
        public virtual DbSet<StaticServicesProfit> StaticServicesProfit { get; set; }
        public virtual DbSet<StatictisReportOperation> StatictisReportOperation { get; set; }
        public virtual DbSet<StatisticRating> StatisticRating { get; set; }
        public virtual DbSet<StatisticRevenue> StatisticRevenue { get; set; }
        public virtual DbSet<StatisticSalaryProduct> StatisticSalaryProduct { get; set; }
        public virtual DbSet<StatisticSalaryService> StatisticSalaryService { get; set; }
        public virtual DbSet<StatisticScscError> StatisticScscError { get; set; }
        public virtual DbSet<StatisticServiceQualityStaff> StatisticServiceQualityStaff { get; set; }
        public virtual DbSet<StatisticsXuatVatTu> StatisticsXuatVatTu { get; set; }
        public virtual DbSet<StoreQrScan> StoreQrScan { get; set; }
        public virtual DbSet<StyleMaster> StyleMaster { get; set; }
        public virtual DbSet<StyleMasterLog> StyleMasterLog { get; set; }
        public virtual DbSet<StyleMasterStatus> StyleMasterStatus { get; set; }
        public virtual DbSet<Stylist4MenBillCutFree> Stylist4MenBillCutFree { get; set; }
        public virtual DbSet<Stylist4MenClass> Stylist4MenClass { get; set; }
        public virtual DbSet<Stylist4MenCredits> Stylist4MenCredits { get; set; }
        public virtual DbSet<Stylist4MenCustomer> Stylist4MenCustomer { get; set; }
        public virtual DbSet<Stylist4MenExam> Stylist4MenExam { get; set; }
        public virtual DbSet<Stylist4MenExamResult> Stylist4MenExamResult { get; set; }
        public virtual DbSet<Stylist4MenGraduationScore> Stylist4MenGraduationScore { get; set; }
        public virtual DbSet<Stylist4MenPointClubs> Stylist4MenPointClubs { get; set; }
        public virtual DbSet<Stylist4MenStudent> Stylist4MenStudent { get; set; }
        public virtual DbSet<Stylist4MenStudyPackage> Stylist4MenStudyPackage { get; set; }
        public virtual DbSet<Stylist4MenTuition> Stylist4MenTuition { get; set; }
        public virtual DbSet<StynextBill> StynextBill { get; set; }
        public virtual DbSet<StynextGroup> StynextGroup { get; set; }
        public virtual DbSet<StynextGroupMember> StynextGroupMember { get; set; }
        public virtual DbSet<StynextKpiConfig> StynextKpiConfig { get; set; }
        public virtual DbSet<StynextLevelConfig> StynextLevelConfig { get; set; }
        public virtual DbSet<StynextLevelKpiConfig> StynextLevelKpiConfig { get; set; }
        public virtual DbSet<StynextSalaryConfig> StynextSalaryConfig { get; set; }
        public virtual DbSet<StynextSalonLevelConfig> StynextSalonLevelConfig { get; set; }
        public virtual DbSet<StynextServiceSalaryConfig> StynextServiceSalaryConfig { get; set; }
        public virtual DbSet<StynextStaticData> StynextStaticData { get; set; }
        public virtual DbSet<StynextStaticProduct> StynextStaticProduct { get; set; }
        public virtual DbSet<StynextStaticService> StynextStaticService { get; set; }
        public virtual DbSet<StynextTarget> StynextTarget { get; set; }
        public virtual DbSet<SuKienTeam> SuKienTeam { get; set; }
        public virtual DbSet<SuKienTeamStaff> SuKienTeamStaff { get; set; }
        public virtual DbSet<SurveyContent> SurveyContent { get; set; }
        public virtual DbSet<SurveyFeedback> SurveyFeedback { get; set; }
        public virtual DbSet<SurveyMapQa> SurveyMapQa { get; set; }
        public virtual DbSet<TargetHighlightSalons> TargetHighlightSalons { get; set; }
        public virtual DbSet<TargetHighlights> TargetHighlights { get; set; }
        public virtual DbSet<TblCategory> TblCategory { get; set; }
        public virtual DbSet<TblCategoryBk20200424> TblCategoryBk20200424 { get; set; }
        public virtual DbSet<TblConfig> TblConfig { get; set; }
        public virtual DbSet<TblConfigWorkDays> TblConfigWorkDays { get; set; }
        public virtual DbSet<TblCusInputBooking> TblCusInputBooking { get; set; }
        public virtual DbSet<TblEmailReport> TblEmailReport { get; set; }
        public virtual DbSet<TblFormMisstake> TblFormMisstake { get; set; }
        public virtual DbSet<TblGroupProduct> TblGroupProduct { get; set; }
        public virtual DbSet<TblInformationStaffClub> TblInformationStaffClub { get; set; }
        public virtual DbSet<TblListBack30Day> TblListBack30Day { get; set; }
        public virtual DbSet<TblMedia> TblMedia { get; set; }
        public virtual DbSet<TblPayon> TblPayon { get; set; }
        public virtual DbSet<TblPermission> TblPermission { get; set; }
        public virtual DbSet<TblPermissionAction> TblPermissionAction { get; set; }
        public virtual DbSet<TblPermissionDefaultPage> TblPermissionDefaultPage { get; set; }
        public virtual DbSet<TblPermissionMap> TblPermissionMap { get; set; }
        public virtual DbSet<TblPermissionMapV2> TblPermissionMapV2 { get; set; }
        public virtual DbSet<TblPermissionMenu> TblPermissionMenu { get; set; }
        public virtual DbSet<TblPermissionMenuV2> TblPermissionMenuV2 { get; set; }
        public virtual DbSet<TblPermissionSalonArea> TblPermissionSalonArea { get; set; }
        public virtual DbSet<TblPermissionStaffRoles> TblPermissionStaffRoles { get; set; }
        public virtual DbSet<TblSalon> TblSalon { get; set; }
        public virtual DbSet<TblSkillLevel> TblSkillLevel { get; set; }
        public virtual DbSet<TblStaffOfClubInformation> TblStaffOfClubInformation { get; set; }
        public virtual DbSet<TblStaffSurvey> TblStaffSurvey { get; set; }
        public virtual DbSet<TblStatus> TblStatus { get; set; }
        public virtual DbSet<TblTemp> TblTemp { get; set; }
        public virtual DbSet<TblTesst> TblTesst { get; set; }
        public virtual DbSet<TeamService> TeamService { get; set; }
        public virtual DbSet<TimekeepingConfig> TimekeepingConfig { get; set; }
        public virtual DbSet<TimekeepingQueueInfo> TimekeepingQueueInfo { get; set; }
        public virtual DbSet<TimekeepingSuggestionStaticData> TimekeepingSuggestionStaticData { get; set; }
        public virtual DbSet<TinhThanh> TinhThanh { get; set; }
        public virtual DbSet<TopSalary> TopSalary { get; set; }
        public virtual DbSet<TrackingWebData> TrackingWebData { get; set; }
        public virtual DbSet<TrackingWebDataV2> TrackingWebDataV2 { get; set; }
        public virtual DbSet<TrackingWebDataV22017> TrackingWebDataV22017 { get; set; }
        public virtual DbSet<TrackingWebEvent> TrackingWebEvent { get; set; }
        public virtual DbSet<TuyenDungDanhGia> TuyenDungDanhGia { get; set; }
        public virtual DbSet<TuyenDungNguoiTest> TuyenDungNguoiTest { get; set; }
        public virtual DbSet<TuyenDungNguon> TuyenDungNguon { get; set; }
        public virtual DbSet<TuyenDungSkill> TuyenDungSkill { get; set; }
        public virtual DbSet<TuyenDungSkillLevel> TuyenDungSkillLevel { get; set; }
        public virtual DbSet<TuyenDungSkillLevelMap> TuyenDungSkillLevelMap { get; set; }
        public virtual DbSet<TuyenDungStatus> TuyenDungStatus { get; set; }
        public virtual DbSet<TuyenDungUngVien> TuyenDungUngVien { get; set; }
        public virtual DbSet<TypeErrorSpecailCus> TypeErrorSpecailCus { get; set; }
        public virtual DbSet<UserStaff> UserStaff { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Users1> Users1 { get; set; }
        public virtual DbSet<Vietnam> Vietnam { get; set; }
        public virtual DbSet<WorkTime> WorkTime { get; set; }
        public virtual DbSet<WorkflowFile> WorkflowFile { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Data Source=10.0.2.76;Initial Catalog=20190809;Persist Security Info=True;User ID=ad_30s;Password=VDrs8XHyz3Rdc7PAiv5Q");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ApiDeviceManager>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ApiHairMode>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ApiHairModeLevel>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ApiHairModeStaff>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ApiNotiSendManager>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UserId).HasComment("Id khách hàng đã được gửi");
            });

            modelBuilder.Entity<ApiSlide>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ApiStaffVideo>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ApiVideo>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ApiVideoTv>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Application>(entity =>
            {
                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeleteTime).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.Description).HasDefaultValueSql("('')");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.Name).HasDefaultValueSql("('')");

                entity.Property(e => e.Uid)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.UpdateTime).HasDefaultValueSql("('1970-1-1')");
            });

            modelBuilder.Entity<Appointment>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Authorization>(entity =>
            {
                entity.HasIndex(e => new { e.UserUid, e.DeviceUid, e.ApplicationUid, e.IsDelete, e.Token })
                    .HasName("IDX_20180718_673_672_Solution_30shinedboAuthorization");

                entity.Property(e => e.ApplicationUid)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeleteTime).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.DeviceName).HasDefaultValueSql("('')");

                entity.Property(e => e.DeviceType).HasDefaultValueSql("('')");

                entity.Property(e => e.DeviceUid)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsForever).HasDefaultValueSql("((0))");

                entity.Property(e => e.Token)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TokenAlg)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TokenExp).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.TokenIss).HasDefaultValueSql("('')");

                entity.Property(e => e.TokenType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Uid)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.UpdateTime).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.UserType).IsUnicode(false);

                entity.Property(e => e.UserUid)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<BillConfirm>(entity =>
            {
                entity.HasIndex(e => new { e.BillId, e.CustomerConfirm })
                    .HasName("IDX_125756_125755_Solution_30shinedboBillConfirm");

                entity.HasIndex(e => new { e.BillId, e.SentTime, e.CustomerConfirm, e.IsDeleted })
                    .HasName("IDX_125754_125753_Solution_30shinedboBillConfirm");
            });

            modelBuilder.Entity<BillDiscount>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DiscountSource).IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.IsAddedBySalon).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDeleted).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<BillService>(entity =>
            {
                entity.HasIndex(e => e.BookingId)
                    .HasName("IX_BillService_Bookingid");

                entity.HasIndex(e => e.CustomerCode)
                    .HasName("IX_BillService_Phone");

                entity.HasIndex(e => e.CustomerId)
                    .HasName("idx_CustomerId");

                entity.HasIndex(e => new { e.StaffHairdresserId, e.IsDelete, e.SalonId, e.Pending })
                    .HasName("IDX_20180719_4992_4991_Solution_30shinedboBillService");

                entity.HasIndex(e => new { e.Id, e.SalonId, e.CreatedDate, e.IsDelete, e.Pending })
                    .HasName("IDX_20180715_163257_163256_Solution_30shinedboBillService");

                entity.HasIndex(e => new { e.Id, e.StaffHairdresserId, e.IsDelete, e.Pending, e.CreatedDate })
                    .HasName("IDX_20180715_158800_158799_Solution_30shinedboBillService");

                entity.HasIndex(e => new { e.InProcedureTime, e.StaffHairMassageId, e.IsDelete, e.Pending, e.CreatedDate })
                    .HasName("IDX_20180718_1956_1955_Solution_30shinedboBillService");

                entity.HasIndex(e => new { e.CustomerCode, e.IsDelete, e.ServiceIds, e.Pending, e.CreatedDate, e.SalonId })
                    .HasName("IDX_92_91_Solution_30shinedboBillService");

                entity.HasIndex(e => new { e.Id, e.SalonId, e.StaffHairMassageId, e.IsDelete, e.Pending, e.CreatedDate })
                    .HasName("IDX_20180718_3411_3410_Solution_30shinedboBillService");

                entity.HasIndex(e => new { e.StaffHairdresserId, e.ServiceIds, e.IsDelete, e.SalonId, e.Pending, e.CreatedDate })
                    .HasName("IDX_20180718_770_769_Solution_30shinedboBillService");

                entity.HasIndex(e => new { e.Id, e.StaffHairdresserId, e.StaffHairMassageId, e.IsDelete, e.Pending, e.CreatedDate, e.SalonId })
                    .HasName("IDX_20180719_633_632_Solution_30shinedboBillService");

                entity.HasIndex(e => new { e.Id, e.ServiceIds, e.CompleteBillTime, e.UploadImageTime, e.IsImages, e.StaffHairdresserId, e.IsDelete, e.Pending })
                    .HasName("IDX_115_114_Solution_30shinedboBillService");

                entity.HasIndex(e => new { e.StaffHairdresserId, e.ServiceIds, e.Images, e.SalonId, e.IsDelete, e.Pending, e.CreatedDate, e.Id })
                    .HasName("_dta_index_BillService_9_680545658__K13_K21_K8_K1_3_14_15_18");

                entity.HasIndex(e => new { e.Id, e.StaffHairdresserId, e.StaffHairMassageId, e.BillCode, e.PdfbillCode, e.CustomerId, e.IsDelete, e.SalonId, e.Pending, e.CreatedDate })
                    .HasName("IDX_20180715_158030_158029_Solution_30shinedboBillService");

                entity.HasIndex(e => new { e.BillCode, e.PdfbillCode, e.InProcedureTime, e.InProcedureTimeModifed, e.EstimateTimeCut, e.SalonId, e.CreatedDate, e.Pending, e.IsDelete, e.BookingId, e.StaffHairdresserId, e.StaffHairMassageId, e.TeamId, e.Id, e.CustomerId })
                    .HasName("_dta_index_BillService_9_680545658__K18_K8_K21_K13_K54_K3_K9_K27_K1_K40_22_23_52_53_63");

                entity.HasIndex(e => new { e.Id, e.StaffHairdresserId, e.ServiceId, e.ProductIds, e.TotalMoney, e.CreatedDate, e.StaffHairMassageId, e.Mark, e.ServiceIds, e.Images, e.SellerId, e.ReceptionId, e.CustomerId, e.IsPayByCard, e.InProcedureTime, e.InProcedureTimeModifed, e.BookingId, e.UploadImageTime, e.CheckoutId, e.CustomerUsedNumber, e.IsDelete, e.SalonId, e.Pending, e.CompleteBillTime })
                    .HasName("IDX_20180715_158827_158826_Solution_30shinedboBillService");

                entity.Property(e => e.FeeCod).HasComment("Phí COD (trả cho đối tác vận chuyển) - Bán hàng online");

                entity.Property(e => e.FeeExtra).HasComment("Phí thu thêm (Áp dụng cho bán hàng online, có thể là tiền vận chuyển)");

                entity.Property(e => e.InProcedureTime).HasComment("Mốc thời gian khách bắt đầu bước vào quy trình gội, cắt (Tính từ khi skinner gội đầu và nhập mã nhân viên trên app Staff 30S)");

                entity.Property(e => e.IsImages).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsSulphite).HasComment("Xác nhận làm hóa chất");

                entity.Property(e => e.IsWrongImage).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.QueueCheckoutInfo).IsUnicode(false);

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BillServiceHis>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.IsImages).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsWrongImage).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.QueueCheckoutInfo).IsUnicode(false);
            });

            modelBuilder.Entity<BillServiceHisOld>(entity =>
            {
                entity.HasIndex(e => e.BookingId)
                    .HasName("IX_BillServiceHis_Bookingid");

                entity.HasIndex(e => e.CustomerCode)
                    .HasName("IX_BillServiceHis_Phone");

                entity.HasIndex(e => e.CustomerId)
                    .HasName("idx_BillServiceHis_CustomerId");

                entity.HasIndex(e => new { e.Id, e.SalonId, e.CreatedDate, e.IsDelete, e.Pending })
                    .HasName("IDX_20180715_163257_163256_Solution_30shinedboBillServiceHis");

                entity.HasIndex(e => new { e.Id, e.SalonId, e.IsDelete, e.Pending, e.CompleteBillTime })
                    .HasName("IDX_20180715_158060_158059_Solution_30shinedboBillServiceHis");

                entity.HasIndex(e => new { e.Id, e.ProductIds, e.IsDelete, e.Pending, e.CreatedDate, e.SalonId })
                    .HasName("IDX_69434_69433_Solution_30shinedboBillServiceHis");

                entity.HasIndex(e => new { e.Id, e.ProductIds, e.IsDelete, e.SalonId, e.Pending, e.CreatedDate })
                    .HasName("IDX_79_78_Solution_30shinedboBillServiceHis");

                entity.HasIndex(e => new { e.Id, e.StaffHairdresserId, e.ServiceId, e.ProductIds, e.TotalMoney, e.CreatedDate, e.StaffHairMassageId, e.Mark, e.ServiceIds, e.Images, e.SellerId, e.ReceptionId, e.CustomerId, e.IsPayByCard, e.InProcedureTime, e.InProcedureTimeModifed, e.BookingId, e.UploadImageTime, e.CheckoutId, e.CustomerUsedNumber, e.IsDelete, e.SalonId, e.Pending, e.CompleteBillTime })
                    .HasName("IDX_20180715_158827_158826_Solution_30shinedboBillServiceHis");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.IsImages).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsWrongImage).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.QueueCheckoutInfo).IsUnicode(false);
            });

            modelBuilder.Entity<BillServiceHisOld2>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.QueueCheckoutInfo).IsUnicode(false);
            });

            modelBuilder.Entity<BillServiceTimeData>(entity =>
            {
                entity.Property(e => e.BillId).ValueGeneratedNever();

                entity.Property(e => e.IsDeleted).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<BillUploadedImages>(entity =>
            {
                entity.Property(e => e.BillId).ValueGeneratedNever();
            });

            modelBuilder.Entity<BillWaitAtSalon>(entity =>
            {
                entity.HasIndex(e => new { e.CustomerPhone, e.CreatedTime, e.IsDelete })
                    .HasName("IDX_20180718_7_6_Solution_30shinedboBill_WaitAtSalon");

                entity.HasIndex(e => new { e.IsDelete, e.CustomerPhone, e.CreatedTime })
                    .HasName("IDX_20180718_5_4_Solution_30shinedboBill_WaitAtSalon");

                entity.HasIndex(e => new { e.SalonId, e.CustomerPhone, e.CreatedTime, e.IsDelete })
                    .HasName("IDX_20180715_162385_162384_Solution_30shinedboBill_WaitAtSalon");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookHour>(entity =>
            {
                entity.HasIndex(e => new { e.HourFrame, e.Id })
                    .HasName("_dta_index_BookHour_9_1669580986__K1_10");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookHour2ndSub>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Publish).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<BookHourSub>(entity =>
            {
                entity.HasIndex(e => new { e.HourFrame, e.SubHourId })
                    .HasName("IDX_75063_75062_Solution_30shinedboBookHour_Sub");

                entity.HasIndex(e => new { e.SubHourId, e.HourFrame })
                    .HasName("IDX_75083_75082_Solution_30shinedboBookHour_Sub");

                entity.HasIndex(e => new { e.HourFrame, e.SubHourId, e.IsDelete })
                    .HasName("IDX_75087_75086_Solution_30shinedboBookHour_Sub");

                entity.HasIndex(e => new { e.SubHourId, e.HourFrame, e.IsDelete })
                    .HasName("IDX_75089_75088_Solution_30shinedboBookHour_Sub");
            });

            modelBuilder.Entity<Booking>(entity =>
            {
                entity.HasIndex(e => e.BookingTempId)
                    .HasName("IDX_20180715_240_239_Solution_30shinedboBooking");

                entity.HasIndex(e => e.CustomerPhone)
                    .HasName("IX_Booking_Phone");

                entity.HasIndex(e => new { e.CustomerPhone, e.IsDelete, e.DatedBook })
                    .HasName("IDX_20180715_163183_163182_Solution_30shinedboBooking");

                entity.HasIndex(e => new { e.CustomerName, e.CustomerPhone, e.HourId, e.CreatedDate, e.ModifiedDate, e.StylistId, e.UserId, e.Note, e.IsMakeBill, e.FlowTimeKeepingId, e.IsSms, e.Smsstatus, e.SendDate, e.Os, e.NewCustomer, e.NoteDelete, e.IsBookAtSalon, e.Macaddress, e.IsLimited, e.TokenClient, e.BookingTempId, e.IsBookOnline, e.IsBookStylist, e.SmsnotiIsSend, e.SmsnotiSendTime, e.SmsnotiStatus, e.AuthOtpIsSet, e.AuthOtpIsVerified, e.AuthOtpToken, e.AuthOtpTimeSend, e.AuthOtpTimeVerified, e.AuthOtpSmsstatus, e.AuthOtpTimeReceived, e.TheadId, e.Version, e.SuggestSalonId, e.CancelBookIsSendSms, e.CancelBookTimeSend, e.CancelBookSmsstatus, e.CancelBookFrom, e.IsAutoStylist, e.IsSetAutoStylist, e.TextNote1, e.TextNote2, e.SalonNote, e.TimeSalonNote, e.BookingStatusId, e.Uid, e.MigrateStatus, e.IsArrived, e.CustomerScore, e.SubHour, e.CustomerId, e.CampaignId, e.SalonId, e.IsDelete, e.DatedBook, e.Id })
                    .HasName("_dta_index_Booking_9_1637580872__K8_K7_K12_K1_2_3_4_5_6_9_10_11_13_14_15_16_17_18_19_20_21_22_23_24_26_27_28_29_30_31_32_33_34_");

                entity.HasIndex(e => new { e.Id, e.CustomerName, e.CustomerPhone, e.HourId, e.CreatedDate, e.ModifiedDate, e.IsDelete, e.SalonId, e.StylistId, e.UserId, e.Note, e.IsMakeBill, e.FlowTimeKeepingId, e.IsSms, e.Smsstatus, e.SendDate, e.Os, e.NewCustomer, e.NoteDelete, e.IsBookAtSalon, e.Macaddress, e.IsLimited, e.TokenClient, e.BookingTempId, e.IsBookOnline, e.IsBookStylist, e.SmsnotiIsSend, e.SmsnotiSendTime, e.SmsnotiStatus, e.AuthOtpIsSet, e.AuthOtpIsVerified, e.AuthOtpToken, e.AuthOtpTimeSend, e.AuthOtpTimeVerified, e.AuthOtpSmsstatus, e.AuthOtpTimeReceived, e.TheadId, e.Version, e.SuggestSalonId, e.CancelBookIsSendSms, e.CancelBookTimeSend, e.CancelBookSmsstatus, e.CancelBookFrom, e.IsAutoStylist, e.IsSetAutoStylist, e.TextNote1, e.TextNote2, e.SalonNote, e.TimeSalonNote, e.BookingStatusId, e.Uid, e.MigrateStatus, e.IsArrived, e.CustomerScore, e.SubHour, e.CustomerId, e.IsCall, e.IsCallTime, e.IsCallTimeModified, e.CampaignId, e.IsEnterVoucher, e.IsUseVoucher, e.PublicIp, e.PrivateIp, e.DatedBook })
                    .HasName("IDX_58_57_Solution_30shinedboBooking");

                entity.HasIndex(e => new { e.Id, e.CustomerName, e.CustomerPhone, e.HourId, e.CreatedDate, e.ModifiedDate, e.SalonId, e.StylistId, e.UserId, e.Note, e.IsMakeBill, e.FlowTimeKeepingId, e.IsSms, e.Smsstatus, e.SendDate, e.NewCustomer, e.NoteDelete, e.IsBookAtSalon, e.Macaddress, e.IsLimited, e.TokenClient, e.BookingTempId, e.IsBookOnline, e.IsBookStylist, e.SmsnotiIsSend, e.SmsnotiSendTime, e.SmsnotiStatus, e.AuthOtpIsSet, e.AuthOtpIsVerified, e.AuthOtpToken, e.AuthOtpTimeSend, e.AuthOtpTimeVerified, e.AuthOtpSmsstatus, e.AuthOtpTimeReceived, e.TheadId, e.Version, e.SuggestSalonId, e.CancelBookIsSendSms, e.CancelBookTimeSend, e.CancelBookSmsstatus, e.CancelBookFrom, e.IsAutoStylist, e.IsSetAutoStylist, e.TextNote1, e.TextNote2, e.SalonNote, e.TimeSalonNote, e.BookingStatusId, e.Uid, e.MigrateStatus, e.IsArrived, e.CustomerScore, e.CustomerId, e.IsCall, e.IsCallTime, e.IsCallTimeModified, e.CampaignId, e.IsEnterVoucher, e.IsUseVoucher, e.PublicIp, e.PrivateIp, e.IsDelete, e.DatedBook, e.SubHour, e.Os })
                    .HasName("IDX_8880_8879_Solution_30shinedboBooking");

                entity.Property(e => e.BookingDynamoId).IsUnicode(false);

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Os).HasComment("Nguồn booking : 1|Web, 2|Android, 3|iOS");

                entity.Property(e => e.SuggestSalonId).HasComment("Salon gợi ý khách đến salon hiện tại được book");

                entity.Property(e => e.TextNote1).HasComment("Ghi chú của Khách hàng khi book lịch");

                entity.Property(e => e.TextNote2).HasComment("Ghi chú của Khách hàng khi book lịch (Khách update trên trang cảm ơn)");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingAvailable>(entity =>
            {
                entity.HasIndex(e => new { e.WorkDate, e.SalonId, e.StylistId })
                    .HasName("BAE_WDE_SID_IDX");

                entity.Property(e => e.RowVersion)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<BookingChangeStylist>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingHis>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.BookingDynamoId).IsUnicode(false);

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingLog>(entity =>
            {
                entity.HasIndex(e => new { e.BookingId, e.IsDelete })
                    .HasName("IDX_337_336_Solution_30shinedboBookingLog");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<BookingRequest>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CustomerPhone).IsUnicode(false);
            });

            modelBuilder.Entity<BookingSalonBackup>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingSelectedItems>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<BookingSlotAvailable>(entity =>
            {
                entity.HasIndex(e => new { e.WorkDate, e.SalonId, e.GroupId })
                    .HasName("BSAE_WST_SID_IDX");

                entity.HasIndex(e => new { e.WorkDate, e.SalonId, e.GroupId, e.StylistId })
                    .HasName("BSAE_WSTS_SID_IDX");

                entity.Property(e => e.RowVersion)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<BookingSlotTotal>(entity =>
            {
                entity.HasIndex(e => new { e.WorkDate, e.SalonId, e.StaffId, e.GroupId })
                    .HasName("BSTL_WSST_SID_IDX");

                entity.Property(e => e.RowVersion)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<BookingSpecialOptionTick>(entity =>
            {
                entity.Property(e => e.ConfigKey).IsUnicode(false);
            });

            modelBuilder.Entity<BookingStatisticSlot>(entity =>
            {
                entity.HasIndex(e => new { e.SalonId, e.WorkDate })
                    .HasName("IDX_4480672_4480671_Solution_30shinedboBooking_Statistic_Slot");

                entity.HasIndex(e => new { e.Slot, e.SalonId, e.IsDelete, e.WorkDate })
                    .HasName("IDX_20180718_4370_4369_Solution_30shinedboBooking_Statistic_Slot");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingStatus>(entity =>
            {
                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeleteTime).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.Description).HasDefaultValueSql("('')");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Name).HasDefaultValueSql("('')");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UpdateTime).HasDefaultValueSql("('1970-1-1')");
            });

            modelBuilder.Entity<BookingStylistBackup>(entity =>
            {
                entity.HasIndex(e => e.StylistId)
                    .HasName("IX_StylistBK")
                    .IsUnique();

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingSuggest>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingSuggestSalonConfig>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingSwitchVersion>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BookingTest>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Brands>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Call>(entity =>
            {
                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.Length).HasDefaultValueSql("((1))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Receiver).HasDefaultValueSql("('')");

                entity.Property(e => e.Sender).HasDefaultValueSql("('')");

                entity.Property(e => e.Seq).HasDefaultValueSql("((0))");

                entity.Property(e => e.StartTime).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UpdateTime).HasDefaultValueSql("('1970-1-1')");
            });

            modelBuilder.Entity<CallBackRequest>(entity =>
            {
                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CallHis>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.Receiver, e.ReceiverId, e.Status, e.IsDelete, e.SalonId, e.IsAutoGenerate, e.StartTime })
                    .HasName("IDX_20180715_18067_18066_Solution_30shinedboCall");

                entity.HasIndex(e => new { e.Id, e.CreateTime, e.DeleteTime, e.EndTime, e.Receiver, e.SenderId, e.ReceiverId, e.Seq, e.Sender, e.Status, e.UpdateTime, e.Length, e.IsDelete, e.Uid, e.MigrateStatus, e.Salon, e.SalonId, e.IsAutoGenerate, e.StartTime })
                    .HasName("IDX_20180715_560_559_Solution_30shinedboCall");

                entity.HasIndex(e => new { e.Id, e.CreateTime, e.DeleteTime, e.EndTime, e.Receiver, e.SenderId, e.ReceiverId, e.Seq, e.Sender, e.UpdateTime, e.Length, e.IsDelete, e.Uid, e.MigrateStatus, e.Salon, e.IsAutoGenerate, e.SalonId, e.StartTime, e.Status })
                    .HasName("IDX_20180715_98_97_Solution_30shinedboCall");

                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.Length).HasDefaultValueSql("((1))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Receiver).HasDefaultValueSql("('')");

                entity.Property(e => e.Sender).HasDefaultValueSql("('')");

                entity.Property(e => e.Seq).HasDefaultValueSql("((0))");

                entity.Property(e => e.StartTime).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UpdateTime).HasDefaultValueSql("('1970-1-1')");
            });

            modelBuilder.Entity<CheckProductFreeze>(entity =>
            {
                entity.Property(e => e.Image1).IsUnicode(false);

                entity.Property(e => e.Image2).IsUnicode(false);

                entity.Property(e => e.MaSp).IsUnicode(false);
            });

            modelBuilder.Entity<CheckinCheckout>(entity =>
            {
                entity.HasIndex(e => new { e.IsDelete, e.UniqueKey })
                    .HasName("IDX_20180718_154_153_Solution_30shinedboCheckinCheckout");

                entity.HasIndex(e => new { e.SalonId, e.StaffId, e.FlowTimeKeepingId, e.IsComeLateConfirm, e.IsLeaveEarlyConfirm, e.IsLeaveEarly, e.IsComeLate, e.IsDelete, e.WorkDate })
                    .HasName("IDX_20180715_4026_4025_Solution_30shinedboCheckinCheckout");

                entity.HasIndex(e => new { e.CheckinTime, e.CheckoutTime, e.SalonId, e.FlowTimeKeepingId, e.UniqueKey, e.Uid, e.MigrateStatus, e.IsComeLateConfirm, e.IsLeaveEarlyConfirm, e.IsLeaveEarly, e.IsComeLate, e.IsDelete, e.StaffId, e.WorkDate, e.Id })
                    .HasName("_dta_index_CheckinCheckout_9_166013276__K8_K5_K7_K1_2_3_4_6_9_10_11_12_13_14_15");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ConfigPartTime>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ConfigQuantifyProduct>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DepartmentId).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPublish).HasDefaultValueSql("((1))");

                entity.Property(e => e.ProductId).HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantify).HasDefaultValueSql("((0))");

                entity.Property(e => e.ServiceId).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalNumberService).HasDefaultValueSql("((0))");

                entity.Property(e => e.Volume).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Contracts>(entity =>
            {
                entity.Property(e => e.Content).HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DepartmentId).HasDefaultValueSql("((0))");

                entity.Property(e => e.DescriptionContract).HasDefaultValueSql("('')");

                entity.Property(e => e.Name).HasDefaultValueSql("('')");

                entity.Property(e => e.PathContract).HasDefaultValueSql("('')");

                entity.Property(e => e.TypeContract).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CrmVoucherWaitTime>(entity =>
            {
                entity.HasIndex(e => new { e.SkinnerId, e.SalonId, e.CreatedTime })
                    .HasName("IDX_20180719_5070_5069_Solution_30shinedboCRM_VoucherWaitTime");

                entity.HasIndex(e => new { e.CheckinId, e.IsUsed, e.IsDelete, e.CreatedTime })
                    .HasName("IDX_20_19_Solution_30shinedboCRM_VoucherWaitTime");

                entity.HasIndex(e => new { e.StylistId, e.IsUsed, e.IsDelete, e.CreatedTime })
                    .HasName("IDX_2_1_Solution_30shinedboCRM_VoucherWaitTime");

                entity.HasIndex(e => new { e.Id, e.BillId, e.CustomerId, e.CheckinId, e.StylistId, e.SkinnerId, e.SalonId, e.VoucherPercent, e.IsUsed, e.ModifiedTime, e.CheckinPoint, e.CheckinMoney, e.SkinnerPoint, e.SkinnerMoney, e.StylistPoint, e.StylistMoney, e.Uid, e.MigrateStatus, e.IsDelete, e.CreatedTime })
                    .HasName("IDX_7337955_7337954_Solution_30shinedboCRM_VoucherWaitTime");

                entity.HasIndex(e => new { e.Id, e.BillId, e.CustomerId, e.CheckinId, e.StylistId, e.SkinnerId, e.VoucherPercent, e.IsUsed, e.ModifiedTime, e.CheckinPoint, e.CheckinMoney, e.SkinnerPoint, e.SkinnerMoney, e.StylistPoint, e.StylistMoney, e.Uid, e.MigrateStatus, e.SalonId, e.IsDelete, e.CreatedTime })
                    .HasName("IDX_7341348_7341347_Solution_30shinedboCRM_VoucherWaitTime");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.HasIndex(e => e.Phone)
                    .HasName("idx_Phone2")
                    .IsUnique();

                entity.HasIndex(e => new { e.Fullname, e.Phone, e.Id })
                    .HasName("_dta_index_Customer_9_20075053__K1_2_3");

                entity.HasIndex(e => new { e.IsDelete, e.Phone, e.Id })
                    .HasName("_dta_index_Customer_9_20075053__K16_K3_K1");

                entity.HasIndex(e => new { e.Fullname, e.Phone, e.Id, e.IsDelete })
                    .HasName("_dta_index_Customer_9_20075053__K3_K1_K16_2");

                entity.Property(e => e.MemberType).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CustomerAppRating>(entity =>
            {
                entity.HasKey(e => e.BillId)
                    .HasName("PK__Customer__11F2FC6A89315D6A");

                entity.Property(e => e.BillId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CustomerBookingCheck>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CustomerDevice>(entity =>
            {
                entity.HasIndex(e => new { e.CustomerId, e.IsDelete })
                    .HasName("IDX_CustomerDevice");

                entity.Property(e => e.DeviceId).IsUnicode(false);

                entity.Property(e => e.Os).IsUnicode(false);
            });

            modelBuilder.Entity<CustomerHairAttribute>(entity =>
            {
                entity.HasIndex(e => e.CustomerId)
                    .HasName("IDX_6547173_6547172_Solution_30shinedboCustomerHairAttribute");

                entity.Property(e => e.AnMac).HasDefaultValueSql("('')");

                entity.Property(e => e.ChatToc).HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CustomerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.DangCam).HasDefaultValueSql("('')");

                entity.Property(e => e.DoCung).HasDefaultValueSql("('')");

                entity.Property(e => e.GhiChuKhac).HasDefaultValueSql("('')");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.KhuonMat).HasDefaultValueSql("('')");

                entity.Property(e => e.NgheNghiep).HasDefaultValueSql("('')");

                entity.Property(e => e.ThoiQuenSay).HasDefaultValueSql("('')");

                entity.Property(e => e.ThoiQuenVuotSap).HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<CustomerHairModeBill>(entity =>
            {
                entity.HasIndex(e => new { e.BillId, e.IsDelete })
                    .HasName("IDX_20180715_162802_162801_Solution_30shinedboCustomer_HairMode_Bill");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CustomerHairModeBillHis>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CustomerHairSkin>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CustomerHairSkinHistory>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CustomerOtpToken>(entity =>
            {
                entity.Property(e => e.CustomerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.CustomerPhone).IsUnicode(false);

                entity.Property(e => e.Imei).IsUnicode(false);

                entity.Property(e => e.Token).IsUnicode(false);
            });

            modelBuilder.Entity<CustomerRating>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CustomerRating1>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CustomerRatingDetail>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CustomerRatingUuDai>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CustomerTag>(entity =>
            {
                entity.HasIndex(e => e.CustomerId)
                    .HasName("IX_CustomerID");
            });

            modelBuilder.Entity<CustomerToken>(entity =>
            {
                entity.HasIndex(e => new { e.Imei, e.IsDelete })
                    .HasName("IDX_2_1_Solution_30shinedboCustomerToken");

                entity.HasIndex(e => new { e.Token, e.IsDelete })
                    .HasName("IDX_19518_19517_Solution_30shinedboCustomerToken");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CustomerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.CustomerPhone).IsUnicode(false);

                entity.Property(e => e.Imei).IsUnicode(false);

                entity.Property(e => e.Token).IsUnicode(false);
            });

            modelBuilder.Entity<CustomerType>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CustomerUuDai>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<DcustomerAtSalon>(entity =>
            {
                entity.HasKey(e => new { e.IdCustomerAtSalon, e.BillId });

                entity.Property(e => e.IdCustomerAtSalon).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<DcustomerConsumeHistory>(entity =>
            {
                entity.Property(e => e.CustomerId).ValueGeneratedNever();

                entity.Property(e => e.IsMigrated).HasDefaultValueSql("((0))");

                entity.Property(e => e.SUpdatedDate).IsUnicode(false);
            });

            modelBuilder.Entity<DcustomerDetailBillHistory>(entity =>
            {
                entity.HasKey(e => new { e.CustomerId, e.BillId });
            });

            modelBuilder.Entity<DcustomerGeneralHistory>(entity =>
            {
                entity.HasKey(e => new { e.CustomerId, e.Type, e.Name });

                entity.Property(e => e.SUpdatedDate).IsUnicode(false);
            });

            modelBuilder.Entity<DcustomerInfo>(entity =>
            {
                entity.HasKey(e => new { e.CustomerId, e.CustomerPhone });

                entity.Property(e => e.CustomerPhone).IsUnicode(false);

                entity.Property(e => e.CustomerGender).HasDefaultValueSql("((1))");

                entity.Property(e => e.TotalMoneyOfBill).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalOfBill).HasDefaultValueSql("((0))");

                entity.Property(e => e.UsedToPayByCard).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<DcustomerQueueInfo>(entity =>
            {
                entity.Property(e => e.MessageId).IsUnicode(false);

                entity.Property(e => e.MessageContent).IsUnicode(false);
            });

            modelBuilder.Entity<DcustomerScore>(entity =>
            {
                entity.HasKey(e => new { e.IdCustomerScore, e.BillId });

                entity.HasIndex(e => new { e.IdCustomerScore, e.NumberUseServiceAtTime, e.CustomerScoreAtTime, e.RatingScore, e.StylistScore, e.CustomerId, e.CreateDate, e.BillId, e.DateOfBill })
                    .HasName("IDX_4496424_4496423_Solution_30shinedboDCustomerScore");

                entity.Property(e => e.IdCustomerScore).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<DcustomerService>(entity =>
            {
                entity.Property(e => e.VoucherPercent).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<DcustomerServiceTotal>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.ServiceId, e.BillId, e.DateLastOfBill, e.Total, e.CreatedDate, e.ModifiedDate, e.IsDelete, e.CustomerId })
                    .HasName("IDX_7747437_7747436_Solution_30shinedboDCustomerServiceTotal");
            });

            modelBuilder.Entity<DcustomerTeamService>(entity =>
            {
                entity.HasIndex(e => new { e.IdCustomerTeamService, e.CustomerId, e.CheckinId, e.SkinnerId, e.StylistId, e.CheckoutId, e.SalonId, e.BillId, e.DateOfBill })
                    .HasName("IDX_7298873_7298872_Solution_30shinedboDCustomerTeamService");

                entity.Property(e => e.BillId).ValueGeneratedNever();

                entity.Property(e => e.IdCustomerTeamService).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Device>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<EquipmentDepartments>(entity =>
            {
                entity.Property(e => e.DeparmentCode).IsUnicode(false);
            });

            modelBuilder.Entity<EquipmentGroups>(entity =>
            {
                entity.Property(e => e.GroupCode).IsUnicode(false);
            });

            modelBuilder.Entity<Equipments>(entity =>
            {
                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<ErpCheck3S>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ErpCheckCsvc>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ErpItemCheck>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ErrorCutHair>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ErrorCutReason>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ExportGoods>(entity =>
            {
                entity.Property(e => e.ExportId).HasComment("Id người xuất hàng");

                entity.Property(e => e.GoodsIds).HasComment("Danh sách Id hàng hóa (dạng json)");

                entity.Property(e => e.Level).HasComment("Cấp độ xuất hàng : 1|Kho xuất cho salon, 2|Salon xuất cho thợ");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RecipientId).HasComment("Id người nhận hàng");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FeedbackPointService>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.SalonId, e.FeedbackQuantity, e.CreatedDate, e.ModifiedDate, e.IsDelete, e.WorkDate })
                    .HasName("IDX_33991_33990_Solution_30shinedboFeedbackPointService");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FeedbackQuantity).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalonId).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<FlowGoods>(entity =>
            {
                entity.Property(e => e.Cost).HasComment("Giá gốc");

                entity.Property(e => e.GoodsId).HasComment("Id của vật tư");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Price).HasComment("Giá");

                entity.Property(e => e.PromotionMoney).HasComment("Tiền khuyễn mãi");

                entity.Property(e => e.Quantity).HasComment("Số lượng");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.VoucherPercent).HasComment("% Khuyến mãi");
            });

            modelBuilder.Entity<FlowProduct>(entity =>
            {
                entity.HasIndex(e => e.BillId)
                    .HasName("idx_BillId");

                entity.HasIndex(e => new { e.ProductId, e.Id, e.BillId })
                    .HasName("_dta_index_FlowProduct_9_501576825__K3_K1_K2");

                entity.HasIndex(e => new { e.ProductId, e.SalonId, e.IsDelete, e.SellerId, e.CreatedDate })
                    .HasName("IDX_20180715_47967_47966_Solution_30shinedboFlowProduct");

                entity.HasIndex(e => new { e.Price, e.ProductId, e.IsDelete, e.SalonId, e.SellerId, e.CreatedDate })
                    .HasName("IDX_20180715_47973_47972_Solution_30shinedboFlowProduct");

                entity.HasIndex(e => new { e.ProductId, e.Quantity, e.SalonId, e.IsDelete, e.SellerId, e.CreatedDate })
                    .HasName("IDX_20180715_47964_47963_Solution_30shinedboFlowProduct");

                entity.HasIndex(e => new { e.VoucherPercent, e.ProductId, e.IsDelete, e.SalonId, e.SellerId, e.CreatedDate })
                    .HasName("IDX_20180715_47975_47974_Solution_30shinedboFlowProduct");

                entity.HasIndex(e => new { e.PromotionMoney, e.IsDelete, e.ComboId, e.ProductId, e.BillId, e.Price, e.Quantity, e.VoucherPercent })
                    .HasName("_dta_index_FlowProduct_9_501576825__K7_K15_K3_K2_K4_K5_K11_12");

                entity.HasIndex(e => new { e.Id, e.BillId, e.ProductId, e.Price, e.Quantity, e.ModifiedDate, e.SalonId, e.SellerId, e.VoucherPercent, e.PromotionMoney, e.Cost, e.ForSalary, e.CheckCombo, e.SalonOrder, e.Uid, e.MigrateStatus, e.IsDelete, e.ComboId, e.CreatedDate })
                    .HasName("IDX_20180715_80036_80035_Solution_30shinedboFlowProduct");

                entity.HasIndex(e => new { e.Id, e.BillId, e.ProductId, e.Price, e.Quantity, e.ModifiedDate, e.SalonId, e.SellerId, e.VoucherPercent, e.PromotionMoney, e.Cost, e.ForSalary, e.ComboId, e.CheckCombo, e.SalonOrder, e.Uid, e.MigrateStatus, e.IsDelete, e.CreatedDate })
                    .HasName("IDX_20180715_83944_83943_Solution_30shinedboFlowProduct");

                entity.HasIndex(e => new { e.Id, e.BillId, e.ProductId, e.Price, e.Quantity, e.ModifiedDate, e.SellerId, e.VoucherPercent, e.PromotionMoney, e.Cost, e.ForSalary, e.CheckCombo, e.SalonOrder, e.Uid, e.MigrateStatus, e.IsDelete, e.ComboId, e.CreatedDate, e.SalonId })
                    .HasName("IDX_20180715_4181_4180_Solution_30shinedboFlowProduct");

                entity.HasIndex(e => new { e.Id, e.BillId, e.ProductId, e.Price, e.Quantity, e.ModifiedDate, e.SellerId, e.VoucherPercent, e.PromotionMoney, e.Cost, e.ForSalary, e.CheckCombo, e.SalonOrder, e.Uid, e.MigrateStatus, e.IsDelete, e.SalonId, e.ComboId, e.CreatedDate })
                    .HasName("IDX_20180715_19066_19065_Solution_30shinedboFlowProduct");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FlowPromotion>(entity =>
            {
                entity.HasIndex(e => new { e.BillId, e.IsDelete })
                    .HasName("IDX_20180715_571_570_Solution_30shinedboFlowPromotion");

                entity.HasIndex(e => new { e.BillId, e.Group, e.IsDelete })
                    .HasName("IDX_20180715_3077_3076_Solution_30shinedboFlowPromotion");

                entity.Property(e => e.Group).HasComment(@"Nhóm : ví dụ như Sản phẩm, Dịch vụ...

| 1 : Dịch vụ (Cạo mặt, Lấy ráy tai...) |");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FlowSalary>(entity =>
            {
                entity.HasIndex(e => e.StaffId)
                    .HasName("IX_FlowSalary_Staffid");

                entity.HasIndex(e => new { e.StaffId, e.RatingPoint, e.BillNormal, e.BillNormalGreat, e.BillNormalGood, e.BillNormalBad, e.BillNormalNorating, e.BillSpecial, e.BillSpecialGreat, e.BillSpecialGood, e.BillSpecialBad, e.BillSpecialNorating, e.MistakePoint, e.SDate })
                    .HasName("IDX_20180715_76110_76109_Solution_30shinedboFlowSalary");

                entity.Property(e => e.AllowanceSalary).HasComment("Lương phụ cấp");

                entity.Property(e => e.FixSalary).HasComment("Lương cứng");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.PartTimeSalary).HasComment("Lương part-time (lương theo giờ)");

                entity.Property(e => e.ProductSalary).HasComment("Lương mỹ phẩm");

                entity.Property(e => e.SDate).HasComment("Ngày store dữ liệu (dữ liệu lương được store theo từng ngày)");

                entity.Property(e => e.ServiceSalary).HasComment("Lương dịch vụ");

                entity.Property(e => e.StaffId).HasComment("ID nhân viên");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FlowService>(entity =>
            {
                entity.HasIndex(e => new { e.BillId, e.IsDelete, e.ServiceId, e.Price, e.Quantity, e.VoucherPercent })
                    .HasName("_dta_index_FlowService_9_533576939__K2_K6_K3_K4_K7_K11");

                entity.HasIndex(e => new { e.BillId, e.Price, e.Quantity, e.VoucherPercent, e.IsDelete, e.ServiceId })
                    .HasName("IDX_20180715_3450_3449_Solution_30shinedboFlowService");

                entity.HasIndex(e => new { e.Id, e.BillId, e.ServiceId, e.Price, e.Quantity, e.ModifiedDate, e.SalonId, e.SellerId, e.VoucherPercent, e.CoefficientRating, e.Uid, e.MigrateStatus, e.IsDelete, e.CreatedDate })
                    .HasName("IDX_20180715_80038_80037_Solution_30shinedboFlowService");

                entity.HasIndex(e => new { e.Id, e.BillId, e.ServiceId, e.Price, e.Quantity, e.ModifiedDate, e.SellerId, e.VoucherPercent, e.CoefficientRating, e.Uid, e.MigrateStatus, e.IsDelete, e.SalonId, e.CreatedDate })
                    .HasName("IDX_20180715_19064_19063_Solution_30shinedboFlowService");

                entity.Property(e => e.CheckCombo).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FlowStaff>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FlowTimeKeeping>(entity =>
            {
                entity.HasIndex(e => new { e.SalonId, e.StaffId, e.WorkDate, e.IsEnroll })
                    .HasName("IDX_20180719_171_170_Solution_30shinedboFlowTimeKeeping");

                entity.HasIndex(e => new { e.StaffId, e.IsDelete, e.IsEnroll, e.WorkDate })
                    .HasName("IDX_20180719_174_173_Solution_30shinedboFlowTimeKeeping");

                entity.HasIndex(e => new { e.WorkTimeId, e.IsDelete, e.IsEnroll, e.StaffId, e.WorkDate })
                    .HasName("IDX_13705_13704_Solution_30shinedboFlowTimeKeeping");

                entity.HasIndex(e => new { e.WorkTimeId, e.IsEnroll, e.StaffId, e.WorkDate, e.IsDelete })
                    .HasName("_dta_index_FlowTimeKeeping_9_1253579504__K12_K2_K4_K7_13");

                entity.HasIndex(e => new { e.StaffId, e.WorkTimeId, e.IsDelete, e.IsEnroll, e.SalonId, e.WorkDate })
                    .HasName("IDX_65725_65724_Solution_30shinedboFlowTimeKeeping");

                entity.HasIndex(e => new { e.StaffId, e.WorkHour, e.IsEnroll, e.WorkTimeId, e.HourIds, e.SalonId, e.WorkDate })
                    .HasName("IDX_20180715_78716_78715_Solution_30shinedboFlowTimeKeeping");

                entity.HasIndex(e => new { e.StaffId, e.WorkHour, e.IsEnroll, e.WorkTimeId, e.HourIds, e.SalonId, e.WorkDate, e.IsDelete })
                    .HasName("IDX_20180715_119758_119757_Solution_30shinedboFlowTimeKeeping");

                entity.HasIndex(e => new { e.Id, e.StaffId, e.SalonId, e.CreatedDate, e.ModifiedDate, e.DoUserId, e.Note, e.WorkHour, e.Type, e.WorkTimeId, e.HourIds, e.CheckinFirstTime, e.CheckoutLastTime, e.DelayTime, e.CheckEnroll, e.Uid, e.MigrateStatus, e.WorkDate, e.IsDelete, e.IsEnroll })
                    .HasName("IDX_7297403_7297402_Solution_30shinedboFlowTimeKeeping");

                entity.Property(e => e.IsDayOver).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Type).HasComment("Kiểu lưu dữ liệu: 1|Điểm danh theo ngày, 2|Giờ làm part-time");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FlowTimeKeepingHis>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.IsDayOver).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.NumberOfWorkHour).HasDefaultValueSql("((0))");

                entity.Property(e => e.NumberOfWorkHourBasic).HasDefaultValueSql("((0))");

                entity.Property(e => e.NumberOfWorkHourOver).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FlowTimeKeepinghisBk20200731>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<FundAccountType>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FundImport>(entity =>
            {
                entity.Property(e => e.AccountTypeId).HasComment("Id tài khoản : Quỹ tiền mặt hay tài khoản ngân hàng");

                entity.Property(e => e.IsReceipt).HasComment("Trạng thái có phải thu hay không. True | Thu, False | Chi");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.SourceId).HasComment("Id nguồn");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FundItemFlow>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FundOffenItem>(entity =>
            {
                entity.Property(e => e.Id).HasComment("Bảng danh sách các chi tiêu thường xuyên");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Money).HasComment("Lượng tiền sử dụng trong khoản thu/chi này");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FundSource>(entity =>
            {
                entity.Property(e => e.Id).HasComment("Nguồn tiền như salon, mỹ phẩm, đào tạo...");

                entity.Property(e => e.Hint).HasComment("Đánh dấu,'salon' | kiểu nguồn là salon");

                entity.Property(e => e.Key).HasComment("Giá trị đi kèm cùng Hint");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<GamificationGrade>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<GamificationQuest>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Icon).IsUnicode(false);
            });

            modelBuilder.Entity<HairAttribute>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<HairAttributeProduct>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<HairStyle>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ImageData>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.ImageBefore, e.ImageAfter, e.ImageCheckBefore, e.ImageCheckAfter, e.Objid, e.Slugkey, e.IsDelete })
                    .HasName("IDX_8699128_8699127_Solution_30shinedboImageData");

                entity.Property(e => e.BeforeMassageImage).IsUnicode(false);

                entity.Property(e => e.CheckinVideoUrl).IsUnicode(false);

                entity.Property(e => e.CheckoutVideoUrl).IsUnicode(false);

                entity.Property(e => e.ChemicalUseCard).IsUnicode(false);

                entity.Property(e => e.IsAuto).HasDefaultValueSql("((1))");

                entity.Property(e => e.ParkingHelpImage).IsUnicode(false);
            });

            modelBuilder.Entity<InventoryData>(entity =>
            {
                entity.Property(e => e.InvenData).HasComment("Lượng sản phẩm tồn hiện tại (= Tồn nhập - Lượng bán). Sang ngày hôm sau, đây sẽ là giá trị tồn kho cuối ngày hôm trước");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<InventoryFlow>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<InventoryFlowHc>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<InventoryHc>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<InventoryImport>(entity =>
            {
                entity.Property(e => e.DoId).HasComment("Id người nhập liệu");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RecipientId).HasComment("Id người nhận");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<IvCheckOutDetail>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.ProductId, e.Quantity, e.IsDelete, e.IvCheckoutId })
                    .HasName("IDX_2011_2010_Solution_30shinedboIvCheckOutDetail");

                entity.HasIndex(e => new { e.ProductId, e.Quantity, e.IsDelete, e.IvCheckoutId, e.CreatedDate })
                    .HasName("IDX_9624_9623_Solution_30shinedboIvCheckOutDetail");
            });

            modelBuilder.Entity<IvInventory>(entity =>
            {
                entity.HasIndex(e => new { e.SalonId, e.IsDelete })
                    .HasName("IDX_10557_10556_Solution_30shinedboIvInventory");

                entity.HasIndex(e => new { e.Id, e.StaffId, e.IsDelete })
                    .HasName("IDX_26931_26930_Solution_30shinedboIvInventory");

                entity.HasIndex(e => new { e.Id, e.Type, e.IsDelete })
                    .HasName("IDX_23731_23730_Solution_30shinedboIvInventory");

                entity.HasIndex(e => new { e.Id, e.Name, e.StaffId, e.CreatedDate, e.ModifiedDate, e.ParentId, e.DeliveryHoursAfterOrderDate, e.Type, e.SalonId, e.IsDelete })
                    .HasName("IDX_9519_9518_Solution_30shinedboIvInventory");

                entity.HasIndex(e => new { e.Id, e.Name, e.Type, e.StaffId, e.CreatedDate, e.ModifiedDate, e.ParentId, e.DeliveryHoursAfterOrderDate, e.SalonId, e.IsDelete })
                    .HasName("IDX_89_88_Solution_30shinedboIvInventory");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeliveryHoursAfterOrderDate).HasDefaultValueSql("((42))");

                entity.Property(e => e.IsCheckProduct).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsCheckService).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IvInventoryCheckTime>(entity =>
            {
                entity.Property(e => e.State).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IvInventoryCurrent>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.InventoryId, e.ProductId, e.Cost, e.ImportFromMainWh, e.ExportToSalon, e.ImportFromPartner, e.ImportFromSalon, e.ImportFromStaff, e.ImportFromReturn, e.BeingTransported, e.SuggestOrder, e.CreatedDate, e.ModifiedDate, e.UsedInService, e.ExportToStaff, e.ExportToMainWh, e.Begin, e.Import, e.Export, e.SellOrUse, e.End, e.VolumeRemain, e.AccountingDate, e.IsDelete })
                    .HasName("IDX_7298234_7298233_Solution_30shinedboIvInventoryCurrent");

                entity.Property(e => e.AccountingDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Begin).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.End).HasDefaultValueSql("((0))");

                entity.Property(e => e.Export).HasDefaultValueSql("((0))");

                entity.Property(e => e.Import).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellOrUse).HasDefaultValueSql("((0))");

                entity.Property(e => e.SuggestOrder).HasDefaultValueSql("((0))");

                entity.Property(e => e.VolumeRemain).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IvInventoryHistory>(entity =>
            {
                entity.Property(e => e.AccountingDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Begin).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.End).HasDefaultValueSql("((0))");

                entity.Property(e => e.Export).HasDefaultValueSql("((0))");

                entity.Property(e => e.Import).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantify).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellOrUse).HasDefaultValueSql("((0))");

                entity.Property(e => e.SuggestOrder).HasDefaultValueSql("((0))");

                entity.Property(e => e.Volume).HasDefaultValueSql("((0))");

                entity.Property(e => e.VolumeRemain).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IvInventoryInitial>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Initial).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IvInventoryMaxService>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.ProductId, e.InvMaxDay, e.InvMaxOld, e.InvMaxUser, e.InventoryId, e.IsDelete, e.CreatedDate })
                    .HasName("IDX_73936_73935_Solution_30shinedboIvInventoryMaxService");
            });

            modelBuilder.Entity<IvMaxProductInventoryNorms>(entity =>
            {
                entity.HasIndex(e => new { e.InventoryId, e.Date });

                entity.HasIndex(e => new { e.InventoryId, e.ProductId, e.Date })
                    .IsUnique();
            });

            modelBuilder.Entity<IvMaxProductInventoryNormsHistory>(entity =>
            {
                entity.HasIndex(e => new { e.InventoryId, e.Date });

                entity.HasIndex(e => new { e.InventoryId, e.ProductId, e.Date });

                entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<IvMaxServiceInventoryNorms>(entity =>
            {
                entity.HasIndex(e => new { e.InventoryId, e.Date });

                entity.HasIndex(e => new { e.InventoryId, e.ProductId, e.Date })
                    .IsUnique();

                entity.Property(e => e.SafeInventorySugges).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IvMaxServiceInventoryNormsHistory>(entity =>
            {
                entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<IvOrder>(entity =>
            {
                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.CosmeticType).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Imgs).IsUnicode(false);

                entity.Property(e => e.IsAuto).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderType).HasDefaultValueSql("((1))");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdOrder).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdReceive).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdReview).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IvOrderDetail>(entity =>
            {
                entity.Property(e => e.Cost).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsAuto).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityExport).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityImport).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityOrder).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantitySuggest).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityType1).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityType2).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityType3).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityType4).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityType5).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalonReason).HasDefaultValueSql("((1))");

                entity.Property(e => e.Whreason).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<IvOrderNum>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IvProductQuantify>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsPublish).HasDefaultValueSql("((1))");

                entity.Property(e => e.Quantify).HasDefaultValueSql("((0))");

                entity.Property(e => e.StaffType).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalNumberService).HasDefaultValueSql("((0))");

                entity.Property(e => e.Volume).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IvStatisticsProductSold>(entity =>
            {
                entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<KcsCheck3S>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<KcsFaceType>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<KetQuaKinhDoanhFlowImport>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<KetQuaKinhDoanhItemImport>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<KetQuaKinhDoanhSalon>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<KpiCriterias>(entity =>
            {
                entity.HasComment("Danh sach tieu chi");

                entity.Property(e => e.CriteriaCode).IsUnicode(false);

                entity.Property(e => e.Point).IsUnicode(false);
            });

            modelBuilder.Entity<KpiDataDays>(entity =>
            {
                entity.Property(e => e.KpiBillKhongAnh).IsUnicode(false);

                entity.Property(e => e.KpiBillMoLech).IsUnicode(false);

                entity.Property(e => e.KpiChoLau).IsUnicode(false);

                entity.Property(e => e.KpiCmt).IsUnicode(false);

                entity.Property(e => e.KpiDoanhThu).IsUnicode(false);

                entity.Property(e => e.KpiGoiNhacKhach).IsUnicode(false);

                entity.Property(e => e.KpiGsLoi).IsUnicode(false);

                entity.Property(e => e.KpiGtKhMoi).IsUnicode(false);

                entity.Property(e => e.KpiQuyTrinh).IsUnicode(false);

                entity.Property(e => e.KpiRange).IsUnicode(false);

                entity.Property(e => e.KpiRatingTb).IsUnicode(false);

                entity.Property(e => e.KpiScscTb).IsUnicode(false);
            });

            modelBuilder.Entity<KpiDataMonths>(entity =>
            {
                entity.Property(e => e.KpiBillKhongAnh).IsUnicode(false);

                entity.Property(e => e.KpiBillMoLech).IsUnicode(false);

                entity.Property(e => e.KpiChoLau).IsUnicode(false);

                entity.Property(e => e.KpiCmt).IsUnicode(false);

                entity.Property(e => e.KpiDoanhThu).IsUnicode(false);

                entity.Property(e => e.KpiGoiNhacKhach).IsUnicode(false);

                entity.Property(e => e.KpiGsLoi).IsUnicode(false);

                entity.Property(e => e.KpiGtKhMoi).IsUnicode(false);

                entity.Property(e => e.KpiQuyTrinh).IsUnicode(false);

                entity.Property(e => e.KpiRange).IsUnicode(false);

                entity.Property(e => e.KpiRatingTb).IsUnicode(false);

                entity.Property(e => e.KpiScscTb).IsUnicode(false);
            });

            modelBuilder.Entity<KpiPointMappings>(entity =>
            {
                entity.HasComment("diem chuyen doi");

                entity.Property(e => e.Point).IsUnicode(false);
            });

            modelBuilder.Entity<KpiPropertyPoints>(entity =>
            {
                entity.HasComment("Diem KPI cho Point");

                entity.Property(e => e.PointValue).IsUnicode(false);
            });

            modelBuilder.Entity<KpiSalonPoints>(entity =>
            {
                entity.Property(e => e.PointValue).IsUnicode(false);
            });

            modelBuilder.Entity<KpiSalons>(entity =>
            {
                entity.HasComment("Dinh muc cho salon");
            });

            modelBuilder.Entity<LockBlock>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.HasIndex(e => new { e.Objid, e.Type, e.Status })
                    .HasName("IDX_20180715_7896_7895_Solution_30shinedboLog");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<MapDeviceOwner>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<MarketingChiPhiPhanBo>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<MarketingChienDich>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<MarketingChiphiItem>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<MarketingChiphingay>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<MarkettingNganSach>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<MemberLog>(entity =>
            {
                entity.HasIndex(e => new { e.IsDelete, e.BillId })
                    .HasName("IDX_65720_65719_Solution_30shinedboMemberLog");

                entity.HasIndex(e => new { e.Phone, e.StartTime, e.Amount, e.BillId, e.Type, e.IsSuccess })
                    .HasName("IDX_720_719_Solution_30shinedboMemberLog");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.HasIndex(e => new { e.IsDelete, e.Status, e.SalonId, e.Receiver, e.SendTime })
                    .HasName("IDX_20180719_955_954_Solution_30shinedboMessage");

                entity.HasIndex(e => new { e.IsDelete, e.Status, e.SalonId, e.Sender, e.SendTime })
                    .HasName("IDX_20180719_932_931_Solution_30shinedboMessage");

                entity.HasIndex(e => new { e.Id, e.ReceiverId, e.Text, e.Seq, e.Status, e.Receiver, e.IsAutoGenerate, e.IsDelete, e.SalonId, e.SendTime })
                    .HasName("IDX_20180715_16925_16924_Solution_30shinedboMessage");

                entity.HasIndex(e => new { e.Id, e.CreateTime, e.DeleteTime, e.SenderId, e.ReceiverId, e.IsAutoGenerate, e.Text, e.Seq, e.Sender, e.Receiver, e.UpdateTime, e.SendTime, e.IsDelete, e.Uid, e.MigrateStatus, e.SendSuccessTime, e.Salon, e.Type, e.SalonId, e.Status })
                    .HasName("IDX_20180715_34999_34998_Solution_30shinedboMessage");

                entity.HasIndex(e => new { e.Id, e.CreateTime, e.DeleteTime, e.SenderId, e.ReceiverId, e.IsAutoGenerate, e.Text, e.Seq, e.Sender, e.Status, e.Receiver, e.UpdateTime, e.SendTime, e.IsDelete, e.Uid, e.MigrateStatus, e.SendSuccessTime, e.Salon, e.Type, e.SalonId })
                    .HasName("IDX_20180715_16929_16928_Solution_30shinedboMessage");

                entity.HasIndex(e => new { e.Id, e.CreateTime, e.DeleteTime, e.SenderId, e.ReceiverId, e.Text, e.Seq, e.Sender, e.Status, e.Receiver, e.UpdateTime, e.IsDelete, e.Uid, e.MigrateStatus, e.SendSuccessTime, e.Salon, e.Type, e.IsAutoGenerate, e.SalonId, e.SendTime })
                    .HasName("IDX_20180715_84_83_Solution_30shinedboMessage");

                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeleteTime).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Receiver).HasDefaultValueSql("('')");

                entity.Property(e => e.SendTime).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.Sender).HasDefaultValueSql("('')");

                entity.Property(e => e.Seq).HasDefaultValueSql("((1))");

                entity.Property(e => e.Text).HasDefaultValueSql("('')");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UpdateTime).HasDefaultValueSql("('1970-1-1')");
            });

            modelBuilder.Entity<MktCampaign>(entity =>
            {
                entity.Property(e => e.AllowApplyWith).IsUnicode(false);

                entity.Property(e => e.CampaignMaxUsage).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CustomerType).HasDefaultValueSql("((0))");

                entity.Property(e => e.Description).HasDefaultValueSql("('')");

                entity.Property(e => e.EndDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.Label).HasDefaultValueSql("(N'')");

                entity.Property(e => e.Name).HasDefaultValueSql("(N'')");

                entity.Property(e => e.OnlyShowInBooking).HasDefaultValueSql("((0))");

                entity.Property(e => e.PaymentMethodRequirement).IsUnicode(false);

                entity.Property(e => e.ServiceType).HasDefaultValueSql("((1))");

                entity.Property(e => e.StartDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TimeRangeRequirement).IsUnicode(false);

                entity.Property(e => e.Type).HasDefaultValueSql("((3))");

                entity.Property(e => e.WeekDayRequirement).IsUnicode(false);
            });

            modelBuilder.Entity<MktCampaignBill>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MktCampaignCustomer>(entity =>
            {
                entity.HasIndex(e => e.CustomerId)
                    .HasName("IX_MktCampaignCustomerID");

                entity.HasIndex(e => new { e.Id, e.CustomerId, e.Used, e.CreatedTime, e.ModifiedTime, e.CampaignId, e.IsDelete })
                    .HasName("IDX_20180718_283_282_Solution_30shinedboMktCampaignCustomer");

                entity.HasIndex(e => new { e.Used, e.CreatedTime, e.ModifiedTime, e.VoucherId, e.IsDelete, e.CampaignId, e.Id, e.CustomerId })
                    .HasName("_dta_index_MktCampaignCustomer_9_1221413586__K7_K2_K1_K3_4_5_6_8");

                entity.HasIndex(e => new { e.Id, e.CampaignId, e.CustomerId, e.Used, e.CreatedTime, e.ModifiedTime, e.VoucherId, e.StartDate, e.EndDate, e.IsDelete })
                    .HasName("IDX_19507_19506_Solution_30shinedboMktCampaignCustomer");

                entity.HasIndex(e => new { e.Id, e.CustomerId, e.Used, e.CreatedTime, e.ModifiedTime, e.VoucherId, e.StartDate, e.EndDate, e.CampaignId, e.IsDelete })
                    .HasName("IDX_6077_6076_Solution_30shinedboMktCampaignCustomer");

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MktCampaignProduct>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MoneyDeductions).HasDefaultValueSql("((0))");

                entity.Property(e => e.MoneyPrePaid).HasDefaultValueSql("((0))");

                entity.Property(e => e.TimesUsed).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<MktCampaignService>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MoneyDeductions).HasDefaultValueSql("((0))");

                entity.Property(e => e.MoneyPrePaid).HasDefaultValueSql("((0))");

                entity.Property(e => e.TimesUsed).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<MktCampaignUsed>(entity =>
            {
                entity.HasKey(e => e.CampaignId)
                    .HasName("PK__MktCampa__3F5E8A99938A2FCF");

                entity.Property(e => e.CampaignId).ValueGeneratedNever();
            });

            modelBuilder.Entity<MktVoucher>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.Code, e.IsActive, e.CreatedTime, e.ModifiedTime, e.CampaignId, e.IsDelete })
                    .HasName("IDX_55688_55687_Solution_30shinedboMktVoucher");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Mobile>(entity =>
            {
                entity.Property(e => e.AppKey).IsUnicode(false);
            });

            modelBuilder.Entity<MonitorCategoryError>(entity =>
            {
                entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TypeError).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<MonitorHandle>(entity =>
            {
                entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MonitorStaffError>(entity =>
            {
                entity.HasIndex(e => new { e.SalonId, e.CategoryRootId, e.StatusError, e.IsDelete, e.CreateDate })
                    .HasName("IDX_33358_33357_Solution_30shinedboMonitorStaffError");

                entity.HasIndex(e => new { e.StaffId, e.SalonId, e.StatusError, e.IsDelete, e.ErrorTime })
                    .HasName("IDX_20180718_2_1_Solution_30shinedboMonitorStaffError");

                entity.HasIndex(e => new { e.Id, e.SalonId, e.StatusError, e.IsCommit, e.IsDelete, e.CreateDate })
                    .HasName("IDX_20180718_595_594_Solution_30shinedboMonitorStaffError");

                entity.HasIndex(e => new { e.Id, e.ReporterId, e.StaffTypeId, e.StaffId, e.HandleId, e.Images, e.CategoryRootId, e.CategorySubId, e.NoteByReporter, e.ReviewerId, e.NoteByReviewer, e.IsPending, e.StatusError, e.ResolverId, e.ResolveTime, e.CreateDate, e.ConfirmTime, e.CommitTime, e.ModifyDate, e.PeriodBeforeConfirm, e.PeriodBeforeCommit, e.ErrorTime, e.SalonId, e.IsCommit, e.IsDelete })
                    .HasName("IDX_20180718_438_437_Solution_30shinedboMonitorStaffError");

                entity.HasIndex(e => new { e.Id, e.ReporterId, e.StaffTypeId, e.StaffId, e.HandleId, e.Images, e.CategoryRootId, e.CategorySubId, e.NoteByReporter, e.ReviewerId, e.NoteByReviewer, e.IsPending, e.IsCommit, e.StatusError, e.ResolverId, e.ResolveTime, e.CreateDate, e.ConfirmTime, e.CommitTime, e.ModifyDate, e.PeriodBeforeConfirm, e.PeriodBeforeCommit, e.ErrorTime, e.ErpStaffTypeId, e.ErpErrorHandle, e.SalonId, e.IsDelete })
                    .HasName("IDX_7451135_7451134_Solution_30shinedboMonitorStaffError");

                entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ErpErrorHandle).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<NetworkOperator>(entity =>
            {
                entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsResend).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Phone).IsUnicode(false);

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<NotificationManagement>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Descriptions).HasDefaultValueSql("('')");

                entity.Property(e => e.Images).HasDefaultValueSql("('')");

                entity.Property(e => e.IsPublish).HasDefaultValueSql("((1))");

                entity.Property(e => e.Name).HasDefaultValueSql("('')");

                entity.Property(e => e.Title).HasDefaultValueSql("('')");

                entity.Property(e => e.Type).HasDefaultValueSql("((0))");

                entity.Property(e => e.Url).HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<NotificationUsers>(entity =>
            {
                entity.HasIndex(e => new { e.UserId, e.SlugKey })
                    .HasName("IDX_191115_2_NotificationUsers");

                entity.HasIndex(e => new { e.CreatedTime, e.Id, e.IsPublish, e.ModifiedTime, e.SlugKey, e.Status, e.UserId, e.NotiId, e.IsDelete })
                    .HasName("IDX_191115_1_NotificationUsers");
            });

            modelBuilder.Entity<NotificationUsers191113>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<NotificationUsersBk>(entity =>
            {
                entity.HasIndex(e => new { e.UserId, e.SlugKey })
                    .HasName("IDX_71191_71190_Solution_30shinedboNotificationUsers");

                entity.HasIndex(e => new { e.Id, e.UserId, e.SlugKey, e.Status, e.IsPublish, e.CreatedTime, e.ModifiedTime, e.NotiId, e.IsDelete })
                    .HasName("IDX_19913_19912_Solution_30shinedboNotificationUsers");

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsPublish).HasDefaultValueSql("((1))");

                entity.Property(e => e.NotiId).HasDefaultValueSql("((0))");

                entity.Property(e => e.SlugKey).HasDefaultValueSql("('')");

                entity.Property(e => e.UserId).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<OperationReportStatistic>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.SalonId, e.CreatedDate, e.ModifedDate, e.IsDelete, e.TotalBill, e.BillOldCustomer, e.BillNewCustomer, e.BookInAdvance, e.CancelBook, e.BookAll, e.TotalBuyShineMember, e.NewCustomerMember, e.OldCustomerMember, e.ShineMemberComeBack, e.TotalIncomePerShineMember, e.TotalIncomePerStylist, e.TotalBillPerStylist, e.TotalIncomePerTime, e.TotalBillPerTime, e.TotalStylistWorkTime, e.TotalSkinnerWorkTime, e.AvgRating, e.Mark1and2, e.StaffError, e.LongWait, e.BillWithoutImage, e.Revenue, e.SpecialCustomer, e.TotalIncome, e.Date })
                    .HasName("IDX_823_822_Solution_30shinedboOperationReportStatistic");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<OrderRecruitingStaff>(entity =>
            {
                entity.Property(e => e.QuantityStaffTest).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PayMethod>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<PermissionAction>(entity =>
            {
                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<PermissionApi>(entity =>
            {
                entity.Property(e => e.ApiPath).IsUnicode(false);

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PermissionErp>(entity =>
            {
                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasDefaultValueSql("('')");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedTime).HasDefaultValueSql("('1970-1-1')");

                entity.Property(e => e.Name).HasDefaultValueSql("('')");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<PermissionMenu>(entity =>
            {
                entity.Property(e => e.ClassTag).IsUnicode(false);

                entity.Property(e => e.IconImage).IsUnicode(false);

                entity.Property(e => e.IsMicroWebApp).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<PermissionMenuAction>(entity =>
            {
                entity.HasIndex(e => new { e.PageId, e.PermissionId, e.IsDelete, e.IsActive })
                    .HasName("IDX_20180715_48_47_Solution_30shinedboPermissionMenuAction");

                entity.HasIndex(e => new { e.PageId, e.ActionId, e.PermissionId, e.IsDelete, e.IsActive })
                    .HasName("IDX_20180715_55074_55073_Solution_30shinedboPermissionMenuAction");

                entity.HasIndex(e => new { e.PermissionId, e.ActionId, e.PageId, e.IsDelete, e.IsActive })
                    .HasName("IDX_20180715_40_39_Solution_30shinedboPermissionMenuAction");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<PermissionSalonArea>(entity =>
            {
                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<PermissionStaff>(entity =>
            {
                entity.HasIndex(e => new { e.PermissionId, e.StaffId, e.IsDelete, e.IsActive })
                    .HasName("IDX_1151_1150_Solution_30shinedboPermissionStaff");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<PreviewImagesReport>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasIndex(e => new { e.Name, e.Id })
                    .HasName("_dta_index_Product_9_166523116__K1_2");

                entity.Property(e => e.BarCode).IsUnicode(false);

                entity.Property(e => e.CoefficientOfWaitingDays).HasDefaultValueSql("((1))");

                entity.Property(e => e.InventoryType).IsUnicode(false);

                entity.Property(e => e.MemberCode).IsUnicode(false);

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ProductReturnExplanation>(entity =>
            {
                entity.Property(e => e.Status).HasComment("0: Giải trình, 1: Đang chờ duyệt, 2: Chấp nhận, 3: Giải trình lại,4: Không chấp nhận, 5: Đã trả hàng");
            });

            modelBuilder.Entity<ProductUsedStatistic>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OrderNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductId).HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantify).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantifyDefault).HasDefaultValueSql("((0))");

                entity.Property(e => e.ServiceId).HasDefaultValueSql("((0))");

                entity.Property(e => e.SlugKey).HasDefaultValueSql("('')");

                entity.Property(e => e.StaffId).HasDefaultValueSql("((0))");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.WorkDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<QlkhoSalonOrder>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.SalonId, e.StatusId, e.OrderDate })
                    .HasName("IDX_20180715_163877_163876_Solution_30shinedboQLKho_SalonOrder");

                entity.HasIndex(e => new { e.Id, e.SalonId, e.IsDelete, e.CheckCosmetic, e.ReceivedTime })
                    .HasName("IDX_20180718_3470_3469_Solution_30shinedboQLKho_SalonOrder");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<QlkhoSalonOrderFlow>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.ProductId, e.Cost, e.Price, e.QuantityOrder, e.CreatedTime, e.ModifiedTime, e.IsDelete, e.QuantityReceived, e.QuantityOwe, e.QuantityExport, e.OrderId })
                    .HasName("IDX_20180715_163875_163874_Solution_30shinedboQLKho_SalonOrder_Flow");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<QlkhoSalonOrderStatus>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<QuanHuyen>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<RatingAnswer>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<RatingBonus>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<RatingConfigAnswer>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<RatingConfigPoint>(entity =>
            {
                entity.Property(e => e.ConventionName).HasComment("Tên gọi mức điểm, ví dụ : 1(0 theo quy ước) | Không hài lòng, 2 | Hài lòng, 3 | Rất hài lòng");

                entity.Property(e => e.ConventionPoint).HasComment("Điểm quy ước, ví dụ : điểm lưu vào bill là 1, quy ước là 0. 2|3, 3|10");

                entity.Property(e => e.Hint).HasComment("Chỉ dấu : 1|Bộ quy ước điểm đánh giá nhân viên từ khách theo bill, 2|Bộ quy ước điểm đánh giá nhân viên từ khảo sát");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RealPoint).HasComment("Điểm được lưu vào bill, ví dụ từ 1 -> 5");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<RatingDetail>(entity =>
            {
                entity.HasIndex(e => new { e.StarNumber, e.BillId })
                    .HasName("KODUOCXOA_dta_index_RatingDetail_9_1563550953__K2D_6")
                    .IsUnique();

                entity.Property(e => e.IsAuto).HasDefaultValueSql("((1))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RatingId).IsUnicode(false);

                entity.Property(e => e.RatingReason8).HasDefaultValueSql("((0))");

                entity.Property(e => e.SatisfactionReasons).IsUnicode(false);

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<RatingDetailV1>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<RatingIsCheck>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<RatingReason>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<RatingTemp>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<RealtimeFirebaseTokenId>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ReportProductivity>(entity =>
            {
                entity.Property(e => e.RevenueProduct).HasComment("doanh thu mỹ phẩm");

                entity.Property(e => e.RevenueService).HasComment("doanh thu dịch vụ");
            });

            modelBuilder.Entity<SalaryConfig>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SalaryConfigStaff>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.SalonId, e.SalaryConfigId, e.FixSalaryOscillation, e.CreatedTime, e.ModifiedTime, e.Uid, e.MigrateStatus, e.IsDeleted, e.StaffId })
                    .HasName("IDX_9_8_Solution_30shinedboSalaryConfigStaff");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SalaryIncome>(entity =>
            {
                entity.HasIndex(e => new { e.StaffId, e.RatingPoint, e.WorkDate })
                    .HasName("IDX_20180715_691_690_Solution_30shinedboSalaryIncome");

                entity.HasIndex(e => new { e.Id, e.SalonId, e.FixedSalary, e.AllowanceSalary, e.OvertimeSalary, e.ServiceSalary, e.ProductSalary, e.BehaveSalary, e.RatingPoint, e.BillNormal, e.BillNormalGreat, e.BillNormalGood, e.BillNormalBad, e.BillNormalNoRating, e.BillSpecial, e.BillSpecialGreat, e.BillSpecialGood, e.BillSpecialBad, e.BillSpecialNoRating, e.Month, e.Year, e.TotalIncome, e.GrandTotalIncome, e.CreatedTime, e.ModifiedTime, e.Uid, e.MigrateStatus, e.StaffId, e.WorkDate, e.IsDeleted })
                    .HasName("IDX_20180715_744_743_Solution_30shinedboSalaryIncome");

                entity.HasIndex(e => new { e.Id, e.SalonId, e.AllowanceSalary, e.OvertimeSalary, e.ServiceSalary, e.ProductSalary, e.BehaveSalary, e.RatingPoint, e.BillNormal, e.BillNormalGreat, e.BillNormalGood, e.BillNormalBad, e.BillNormalNoRating, e.BillSpecial, e.BillSpecialGreat, e.BillSpecialGood, e.BillSpecialBad, e.BillSpecialNoRating, e.Month, e.Year, e.TotalIncome, e.GrandTotalIncome, e.CreatedTime, e.ModifiedTime, e.Uid, e.MigrateStatus, e.LevelId, e.IsDeleted, e.StaffId, e.WorkDate, e.FixedSalary })
                    .HasName("_dta_index_SalaryIncome_9_1741359688__K28_K2_K21_K4_1_3_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_22_23_24_25_26_27_29_30_31");

                entity.HasIndex(e => new { e.Id, e.StaffId, e.SalonId, e.FixedSalary, e.AllowanceSalary, e.OvertimeSalary, e.ServiceSalary, e.ProductSalary, e.BehaveSalary, e.RatingPoint, e.BillNormal, e.BillNormalGreat, e.BillNormalGood, e.BillNormalBad, e.BillNormalNoRating, e.BillSpecial, e.BillSpecialGreat, e.BillSpecialGood, e.BillSpecialBad, e.BillSpecialNoRating, e.Month, e.Year, e.TotalIncome, e.GrandTotalIncome, e.CreatedTime, e.ModifiedTime, e.IsDeleted, e.Uid, e.MigrateStatus, e.LevelId, e.Kpisalary, e.WorkDate })
                    .HasName("IDX_35_34_Solution_30shinedboSalaryIncome");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RatingPoint).HasDefaultValueSql("((0))");

                entity.Property(e => e.TempSalary).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SalaryIncomeChange>(entity =>
            {
                entity.HasIndex(e => new { e.StaffId, e.SalonId, e.ChangedType, e.ScoreFactor, e.IsDeleted, e.WorkDate })
                    .HasName("IDX_20180715_75498_75497_Solution_30shinedboSalaryIncomeChange");

                entity.HasIndex(e => new { e.Id, e.StaffId, e.ChangedTypeId, e.Description, e.ScoreFactor, e.SalonId, e.ChangedType, e.WorkDate, e.IsDeleted })
                    .HasName("IDX_20180715_33167_33166_Solution_30shinedboSalaryIncomeChange");

                entity.HasIndex(e => new { e.Id, e.ChangedType, e.ChangedTypeId, e.Description, e.Images, e.Point, e.ScoreFactor, e.CreatedTime, e.ModifiedTime, e.Uid, e.MigrateStatus, e.StaffId, e.SalonId, e.IsDeleted, e.WorkDate })
                    .HasName("IDX_20180715_55668_55667_Solution_30shinedboSalaryIncomeChange");

                entity.HasIndex(e => new { e.Id, e.SalonId, e.ChangedType, e.ChangedTypeId, e.Description, e.Images, e.Point, e.ScoreFactor, e.CreatedTime, e.ModifiedTime, e.Uid, e.MigrateStatus, e.StaffId, e.IsDeleted, e.WorkDate })
                    .HasName("IDX_20180715_6_5_Solution_30shinedboSalaryIncomeChange");

                entity.HasIndex(e => new { e.Id, e.StaffId, e.SalonId, e.ChangedType, e.ChangedTypeId, e.Description, e.Images, e.Point, e.ScoreFactor, e.CreatedTime, e.ModifiedTime, e.IsDeleted, e.Uid, e.MigrateStatus, e.WorkDate })
                    .HasName("IDX_20180718_386_385_Solution_30shinedboSalaryIncomeChange");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SalonAudit>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<SalonCampaign>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SalonDailyCost>(entity =>
            {
                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SalonEquipment>(entity =>
            {
                entity.Property(e => e.IsDeleted).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SalonEquipmentChange>(entity =>
            {
                entity.Property(e => e.IsDeleted).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SalonProduct>(entity =>
            {
                entity.Property(e => e.IsCheckEndDay).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsUse).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SalonRanking>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SalonService>(entity =>
            {
                entity.HasIndex(e => new { e.ServiceId, e.Price, e.HeSoHl, e.IsCheck, e.SalonId, e.IsDelete })
                    .HasName("IDX_65722_65721_Solution_30shinedboSalon_Service");

                entity.HasIndex(e => new { e.Id, e.ServiceId, e.Price, e.HeSoHl, e.IsCheck, e.IsCheckSalon, e.IsDelete, e.Uid, e.MigrateStatus, e.SalonId })
                    .HasName("IDX_65821_65820_Solution_30shinedboSalon_Service");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ScscCategory>(entity =>
            {
                entity.HasKey(e => e.IdScscCate)
                    .HasName("PK_SCSC_Error");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ScscCheckError>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.BillServiceId });

                entity.HasIndex(e => new { e.PointError, e.BillServiceId })
                    .HasName("IDX_20180715_158943_158942_Solution_30shinedboSCSC_CheckError");

                entity.HasIndex(e => new { e.BillServiceId, e.IsDelete, e.PointError })
                    .HasName("IDX_117_116_Solution_30shinedboSCSC_CheckError");

                entity.HasIndex(e => new { e.BillServiceId, e.ComPlatetionId, e.Publish, e.IsDelete })
                    .HasName("IDX_20180719_5021_5020_Solution_30shinedboSCSC_CheckError");

                entity.HasIndex(e => new { e.BillServiceId, e.ConnectTiveId, e.Publish, e.IsDelete })
                    .HasName("IDX_20180719_5017_5016_Solution_30shinedboSCSC_CheckError");

                entity.HasIndex(e => new { e.BillServiceId, e.ImageError, e.Publish, e.IsDelete })
                    .HasName("IDX_20180719_5023_5022_Solution_30shinedboSCSC_CheckError");

                entity.HasIndex(e => new { e.BillServiceId, e.Publish, e.IsDelete, e.PointError })
                    .HasName("IDX_20180715_158901_158900_Solution_30shinedboSCSC_CheckError");

                entity.HasIndex(e => new { e.BillServiceId, e.ShapeId, e.Publish, e.IsDelete })
                    .HasName("IDX_20180719_5015_5014_Solution_30shinedboSCSC_CheckError");

                entity.HasIndex(e => new { e.BillServiceId, e.SharpNessId, e.Publish, e.IsDelete })
                    .HasName("IDX_20180719_5019_5018_Solution_30shinedboSCSC_CheckError");

                entity.HasIndex(e => new { e.BillServiceId, e.ImageError, e.ShapeId, e.ConnectTiveId, e.SharpNessId, e.ImageErrorCurling, e.ComPlatetionId, e.PointError, e.HairTipId, e.HairRootId, e.HairWavesId, e.TotalPointScsccurling, e.IsDelete })
                    .HasName("IDX_18776_18775_Solution_30shinedboSCSC_CheckError");

                entity.HasIndex(e => new { e.ImageError, e.NoteError, e.ShapeId, e.ConnectTiveId, e.TotalPointScsccurling, e.ImageErrorCurling, e.SharpNessId, e.ComPlatetionId, e.TotalPointScsc, e.HairTipId, e.HairRootId, e.HairWavesId, e.BillServiceId, e.Id })
                    .HasName("_dta_index_SCSC_CheckError_9_1908707510__K2_K1_3_4_5_6_7_8_13_22_23_24_25_26");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ScscCheckErrorLog>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SelfieCode>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.HasIndex(e => new { e.Name, e.Id })
                    .HasName("_dta_index_Service_9_258099960__K1_2");

                entity.Property(e => e.AffinityTags).IsUnicode(false);

                entity.Property(e => e.CheckCombo).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsCheckCurling).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsCheckKcs).HasDefaultValueSql("((1))");

                entity.Property(e => e.MapIdService).IsUnicode(false);

                entity.Property(e => e.MapIdService1).IsUnicode(false);

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ServiceRating>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Slug).IsUnicode(false);

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ServiceRatingRelationship>(entity =>
            {
                entity.HasIndex(e => e.BillServiceId)
                    .HasName("_dta_index_Service_Rating_Relationship_9_823123656__K2");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ServiceSalonConfig>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.ServiceCoefficient, e.ServiceBonus, e.CoefficientOvertimeHour, e.CoefficientOvertimeDay, e.SalonId, e.ServiceId, e.DepartmentId, e.IsPublish, e.IsDelete })
                    .HasName("IDX_38153_38152_Solution_30shinedboServiceSalonConfig");

                entity.HasIndex(e => new { e.Id, e.ServiceId, e.ServiceCoefficient, e.ServiceBonus, e.CoefficientOvertimeHour, e.CoefficientOvertimeDay, e.CreatedTime, e.ModifiedTime, e.IsPublish, e.IsDelete, e.SalonId, e.DepartmentId })
                    .HasName("IDX_35472_35471_Solution_30shinedboServiceSalonConfig");

                entity.HasIndex(e => new { e.Id, e.SalonId, e.DepartmentId, e.ServiceCoefficient, e.ServiceBonus, e.CoefficientOvertimeHour, e.CoefficientOvertimeDay, e.CreatedTime, e.ModifiedTime, e.IsPublish, e.IsDelete, e.Kpipercent, e.ServiceId })
                    .HasName("IDX_65809_65808_Solution_30shinedboServiceSalonConfig");

                entity.Property(e => e.ReceptionServiceCommission).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ServiceSalonGoldTime>(entity =>
            {
                entity.Property(e => e.CoefficientGolden).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HoursId).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPublish).HasDefaultValueSql("((1))");

                entity.Property(e => e.ServiceSalonConfigId).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ServiceTemp>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ServiceWorkflow>(entity =>
            {
                entity.Property(e => e.IsDeleted).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ServiceWorkflowStep>(entity =>
            {
                entity.Property(e => e.IsDeleted).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SkinAttribute>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SkinAttributeProduct>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SmBillTemp>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.IsDelete, e.Hcitem, e.BillServiceId, e.BookingId, e.CreatedDate })
                    .HasName("IDX_20180719_33_32_Solution_30shinedboSM_BillTemp");

                entity.Property(e => e.BookingId).HasComment("Booking ID");

                entity.Property(e => e.CustomerId).HasComment("Khách hàng ID");

                entity.Property(e => e.FeeCod).HasComment("Phí COD (trả cho đối tác vận chuyển) - Bán hàng online");

                entity.Property(e => e.FeeExtra).HasComment("Phí thu thêm (Áp dụng cho bán hàng online, có thể là tiền vận chuyển)");

                entity.Property(e => e.Images).HasComment("Ảnh khách hàng");

                entity.Property(e => e.InProcedureTime).HasComment("Mốc thời gian khách bắt đầu bước vào quy trình gội, cắt (Tính từ khi skinner gội đầu và nhập mã nhân viên trên app Staff 30S)");

                entity.Property(e => e.InProcedureTimeModifed).HasComment("Thời gian sửa mốc khách vào gội lần cuối cùng");

                entity.Property(e => e.IsOnline).HasComment("Trạng thái bill có phải online hay ko");

                entity.Property(e => e.IsPayByCard).HasComment("Khách có thanh toán bằng Card hay ko");

                entity.Property(e => e.IsX2).HasComment("Có tính nhân đôi cho nhân viên hay không");

                entity.Property(e => e.Mark).HasComment("Điểm đánh giá");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Note).HasComment("Ghi chú");

                entity.Property(e => e.Paid).HasComment("Trạng thái đã thanh toán hay chưa");

                entity.Property(e => e.PayMethodId).HasComment("Phương thức thanh toán ID");

                entity.Property(e => e.ProductIds).HasComment("JSON mảng Sản phẩm");

                entity.Property(e => e.ReceptionId).HasComment("Lễ tân (Checkin) ID");

                entity.Property(e => e.SalonId).HasComment("Salon ID");

                entity.Property(e => e.SellerId).HasComment("NV bán mỹ phẩm ID");

                entity.Property(e => e.ServiceIds).HasComment("JSON mảng Dịch vụ");

                entity.Property(e => e.StaffHairMassageId).HasComment("Skinner ID");

                entity.Property(e => e.StaffHairdresserId).HasComment("Stylist ID");

                entity.Property(e => e.TotalMoney).HasComment("Tổng số tiền");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SmBillTempFlowProduct>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SmBillTempFlowService>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SmBookingTemp>(entity =>
            {
                entity.HasIndex(e => new { e.Order, e.IsDelete, e.SalonId, e.DatedBook, e.IsCall, e.SubHour })
                    .HasName("IDX_8672602_8672601_Solution_30shinedboSM_BookingTemp");

                entity.HasIndex(e => new { e.Order, e.DatedBook, e.IsDelete, e.SalonId, e.IsCall, e.HourId, e.Id })
                    .HasName("_dta_index_SM_BookingTemp_9_2003030417__K12_K7_K8_K21_K4_K1_34");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Os).HasComment("Nguồn booking : 1|Web, 2|Android, 3|iOS");

                entity.Property(e => e.SuggestSalonId).HasComment("Salon gợi ý khách đến salon hiện tại được book");

                entity.Property(e => e.TextNote1).HasComment("Ghi chú của Khách hàng khi book lịch");

                entity.Property(e => e.TextNote2).HasComment("Ghi chú của Khách hàng khi book lịch (Khách update trên trang cảm ơn)");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SmBookingTempHis>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SmEnrollTemp>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.StaffId, e.SalonId, e.WorkDate, e.IsEnroll, e.IsDelete })
                    .HasName("IDX_65812_65811_Solution_30shinedboSM_EnrollTemp");

                entity.HasIndex(e => new { e.Id, e.CreatedTime, e.ModifiedTime, e.IsDelete, e.Uid, e.MigrateStatus, e.WorkDate, e.StaffId, e.IsEnroll, e.SalonId })
                    .HasName("IDX_20180715_533_532_Solution_30shinedboSM_EnrollTemp");

                entity.Property(e => e.IsEnroll).HasComment("Trạng thái điểm danh : True | Điểm danh, False | Không điểm danh");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalonId).HasComment("Salon ID");

                entity.Property(e => e.StaffId).HasComment("Nhân viên ID");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.WorkDate).HasComment("Ngày làm việc");
            });

            modelBuilder.Entity<SmEnrollTempHour>(entity =>
            {
                entity.HasIndex(e => new { e.EnrollId, e.HourId, e.IsDelete })
                    .HasName("IDX_45414_45413_Solution_30shinedboSM_EnrollTemp_Hour");

                entity.HasIndex(e => new { e.Id, e.HourId, e.CreatedTime, e.ModifiedTime, e.Uid, e.MigrateStatus, e.EnrollId, e.IsDelete })
                    .HasName("IDX_20180715_548_547_Solution_30shinedboSM_EnrollTemp_Hour");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SocialThread>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.StType).HasComment("Kiểu nguồn thông tin : 1|Nguồn thông tin biết đến cửa hàng, 2|Nguồn thông tin khảo sát nhân viên");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SpecialCusDetail>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.CutErrorDate, e.StaffId, e.SalonId, e.QuantityInvited, e.DiscountServices, e.DiscountCosmetic, e.Note, e.ReasonDiff, e.QuantityFree, e.IsMsm, e.Smsstatus, e.SendDate, e.Uid, e.MigrateStatus, e.SpecialCusId, e.IsDelete })
                    .HasName("IDX_20180718_15_14_Solution_30shinedboSpecialCusDetail");

                entity.HasIndex(e => new { e.Id, e.SpecialCusId, e.StaffId, e.SalonId, e.DiscountServices, e.DiscountCosmetic, e.Note, e.ReasonDiff, e.QuantityFree, e.IsMsm, e.Smsstatus, e.SendDate, e.Uid, e.MigrateStatus, e.CutErrorDate, e.IsDelete, e.QuantityInvited })
                    .HasName("IDX_20180718_116_115_Solution_30shinedboSpecialCusDetail");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SpecialCustomer>(entity =>
            {
                entity.HasIndex(e => new { e.CreatedDate, e.IsSms, e.Smsstatus, e.SendDate, e.Publish, e.BrowseId, e.Uid, e.MigrateStatus, e.CustomerId, e.CustomerTypeId, e.IsDelete, e.Id })
                    .HasName("_dta_index_SpecialCustomer_9_1698533205__K2_K3_K4_K1_5_6_7_8_9_10_11_12");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Staff>(entity =>
            {
                entity.HasIndex(e => new { e.Fullname, e.Id })
                    .HasName("_dta_index_Staff_9_1185865270__K1_14");

                entity.HasIndex(e => new { e.Email, e.Active, e.Password })
                    .HasName("IDX_162714_162713_Solution_30shinedboStaff");

                entity.HasIndex(e => new { e.SalonId, e.Id, e.Fullname })
                    .HasName("_dta_index_Staff_9_1185865270__K25_K1_K14");

                entity.HasIndex(e => new { e.Id, e.SalonId, e.IsDelete, e.DateJoin })
                    .HasName("IDX_30048_30047_Solution_30shinedboStaff");

                entity.HasIndex(e => new { e.Id, e.Fullname, e.IsDelete, e.Type, e.Active })
                    .HasName("IDX_20180718_2486_2485_Solution_30shinedboStaff");

                entity.HasIndex(e => new { e.SalonId, e.TeamId, e.Type, e.Active, e.IsDelete })
                    .HasName("IDX_20180719_13186_13185_Solution_30shinedboStaff");

                entity.HasIndex(e => new { e.Id, e.Fullname, e.IsAccountLogin, e.Type, e.Active, e.IsDelete })
                    .HasName("IDX_3728_3727_Solution_30shinedboStaff");

                entity.HasIndex(e => new { e.Id, e.Type, e.Fullname, e.IsAccountLogin, e.Active, e.IsDelete })
                    .HasName("IDX_13433_13432_Solution_30shinedboStaff");

                entity.HasIndex(e => new { e.Id, e.Fullname, e.TeamId, e.GroupLevelId, e.Active, e.SalonId, e.IsDelete, e.Type })
                    .HasName("_dta_index_Staff_9_1185865270__K13_K25_K21_K7_1_14_42_50");

                entity.HasIndex(e => new { e.Id, e.Phone, e.Email, e.Active, e.Fullname, e.IsDelete, e.SalonId, e.SkillLevel, e.DateJoin, e.NgayTinhThamNien, e.Type })
                    .HasName("IDX_20180715_163958_163957_Solution_30shinedboStaff");

                entity.HasIndex(e => new { e.Id, e.Type, e.Phone, e.Email, e.Fullname, e.SnDay, e.SnMonth, e.SalonId, e.SkillLevel, e.NgayTinhThamNien, e.Active, e.IsDelete })
                    .HasName("IDX_20180715_163340_163339_Solution_30shinedboStaff");

                entity.Property(e => e.Code).IsFixedLength();

                entity.Property(e => e.IsActiveBooking).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffApprovalInfo>(entity =>
            {
                entity.HasIndex(e => e.CreatedTime)
                    .HasName("idx_StaffApprovalInfo_CreatedTime");

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<StaffAutoCondition>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffAutoLevelLog>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffAutoLevelup>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffBillServiceDetail>(entity =>
            {
                entity.HasIndex(e => new { e.BillId, e.StaffId })
                    .HasName("IDX_20180715_2051_2050_Solution_30shinedboStaffBillServiceDetail");

                entity.HasIndex(e => new { e.Id, e.BillId, e.ServiceId, e.StaffLevelId, e.OvertimeStatusValue, e.RatingMark, e.RatingMoney, e.SalaryCoeficient, e.ServiceCoeficient, e.ServiceIncomeBonus, e.IsDelete, e.ModifyTime, e.CreateTime, e.Quantity, e.ConventionPoint, e.ServiceBonus, e.BillSalonId, e.DepartmentId, e.StaffId, e.WorkDate })
                    .HasName("IDX_7313409_7313408_Solution_30shinedboStaffBillServiceDetail");

                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ServiceBonus).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StaffContractMap>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsReceived).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StaffErrorSpecailCus>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffFluctuations>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.CreatedDate, e.StaffId, e.StatusId, e.IsDetele })
                    .HasName("IDX_20180715_162851_162850_Solution_30shinedboStaff_Fluctuations");

                entity.HasIndex(e => new { e.Id, e.StaffId, e.StaffType, e.SalonCurrentId, e.SalonChangeId, e.Description, e.StatusId, e.IsDetele, e.CreatedDate })
                    .HasName("IDX_602_601_Solution_30shinedboStaff_Fluctuations");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffMistake>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffProcedure>(entity =>
            {
                entity.HasIndex(e => new { e.Publish, e.IsDelete })
                    .HasName("IDX_63253_63252_Solution_30shinedboStaffProcedure");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffProfileMap>(entity =>
            {
                entity.HasIndex(e => new { e.StaffId, e.StatusProfileId, e.IsDelete })
                    .HasName("IDX_16837_16836_Solution_30shinedboStaffProfileMap");

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<StaffRanking>(entity =>
            {
                entity.Property(e => e.StaffId).ValueGeneratedNever();
            });

            modelBuilder.Entity<StaffRoll>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffSalonHistory>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffSkillTag>(entity =>
            {
                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StaffTarget>(entity =>
            {
                entity.HasIndex(e => new { e.StaffId, e.Kpidistribution, e.Type, e.IsDelete })
                    .HasName("IDX_29442_29441_Solution_30shinedboStaffTarget");

                entity.HasIndex(e => new { e.Kpidistribution, e.WorkDate, e.StaffId, e.Type, e.IsDelete })
                    .HasName("IDX_30001_30000_Solution_30shinedboStaffTarget");

                entity.HasIndex(e => new { e.StaffId, e.Kpidistribution, e.Type, e.IsDelete, e.WorkDate })
                    .HasName("IDX_29352_29351_Solution_30shinedboStaffTarget");
            });

            modelBuilder.Entity<StaffType>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaffWorkingData>(entity =>
            {
                entity.Property(e => e.TotalBill).HasDefaultValueSql("((0))");

                entity.Property(e => e.WorkHours).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StaffWorkingState>(entity =>
            {
                entity.HasKey(e => new { e.StaffId, e.WorkDate })
                    .HasName("PK___staff_w__F4F57649BD9C7A61");

                entity.HasOne(d => d.Staff)
                    .WithMany(p => p.StaffWorkingState)
                    .HasForeignKey(d => d.StaffId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK___staff_wo__staff__3DEC0AB7");
            });

            modelBuilder.Entity<StaticExpense>(entity =>
            {
                entity.HasIndex(e => new { e.SalonId, e.TotalSales, e.TotalServiceProfit, e.TotalCosmeticProfit, e.TotalProductPrice, e.TotalStaffSalary, e.Mktexpense, e.Itexpense, e.TotalIncomeAfterTax, e.NumberOfTurns, e.TotalTransactionPerCus, e.TotalServicePerCus, e.TotalProductPerCus, e.DirectFee, e.SalaryServicePerServiceIncome, e.TotalProductCapital, e.TotalPayOffKcs, e.TotalDailyCostInventory, e.ElectricityAndWaterBill, e.SalonFee, e.RentWithTax, e.CapitalSpending, e.TotalSmsexpenses, e.ShippingExpend, e.InternetAndPhoneBill, e.SocialInsuranceAndFixedCost, e.Tax, e.IncomeTaxes, e.SalonUnplannedSpending, e.ManageFee, e.OfficeRentAndServiceCose, e.OfficeStaffSalary, e.SalesSalary, e.OfficeStaffSocialInsurance, e.UnplannedSpending, e.Compensation, e.TotalOtherIncome, e.TotalSmdistributionToday, e.TotalProductSm, e.TotalSmdistributon, e.TotalNetRevenue, e.WorkDate })
                    .HasName("IDX_36649_36648_Solution_30shinedboStaticExpense");

                entity.HasIndex(e => new { e.SalonId, e.TotalSales, e.TotalServiceProfit, e.TotalCosmeticProfit, e.TotalProductPrice, e.TotalStaffSalary, e.Mktexpense, e.Itexpense, e.TotalIncomeAfterTax, e.NumberOfTurns, e.TotalTransactionPerCus, e.TotalServicePerCus, e.TotalProductPerCus, e.DirectFee, e.SalaryServicePerServiceIncome, e.TotalProductCapital, e.TotalPayOffKcs, e.TotalDailyCostInventory, e.ElectricityAndWaterBill, e.SalonFee, e.RentWithTax, e.CapitalSpending, e.TotalSmsexpenses, e.ShippingExpend, e.InternetAndPhoneBill, e.SocialInsuranceAndFixedCost, e.Tax, e.IncomeTaxes, e.SalonUnplannedSpending, e.ManageFee, e.OfficeRentAndServiceCose, e.OfficeStaffSalary, e.SalesSalary, e.OfficeStaffSocialInsurance, e.UnplannedSpending, e.Compensation, e.TotalOtherIncome, e.TotalSmdistributionToday, e.TotalProductSm, e.TotalSmdistributon, e.TotalNetRevenue, e.TotalSecurityCheckoutSalary, e.WorkDate })
                    .HasName("IDX_4_3_Solution_30shinedboStaticExpense");

                entity.HasIndex(e => new { e.TotalSales, e.TotalServiceProfit, e.TotalCosmeticProfit, e.TotalProductPrice, e.TotalStaffSalary, e.Mktexpense, e.Itexpense, e.TotalIncomeAfterTax, e.NumberOfTurns, e.TotalTransactionPerCus, e.TotalServicePerCus, e.TotalProductPerCus, e.DirectFee, e.SalaryServicePerServiceIncome, e.TotalProductCapital, e.TotalPayOffKcs, e.TotalDailyCostInventory, e.ElectricityAndWaterBill, e.SalonFee, e.RentWithTax, e.CapitalSpending, e.TotalSmsexpenses, e.ShippingExpend, e.InternetAndPhoneBill, e.SocialInsuranceAndFixedCost, e.Tax, e.IncomeTaxes, e.SalonUnplannedSpending, e.ManageFee, e.OfficeRentAndServiceCose, e.OfficeStaffSalary, e.SalesSalary, e.OfficeStaffSocialInsurance, e.UnplannedSpending, e.Compensation, e.TotalOtherIncome, e.TotalSmdistributionToday, e.TotalProductSm, e.TotalSmdistributon, e.TotalNetRevenue, e.TotalSecurityCheckoutSalary, e.SalonId, e.WorkDate })
                    .HasName("IDX_63928_63927_Solution_30shinedboStaticExpense");

                entity.Property(e => e.CapitalSpending).HasDefaultValueSql("((0))");

                entity.Property(e => e.Compensation).HasDefaultValueSql("((0))");

                entity.Property(e => e.DirectFee).HasDefaultValueSql("((0))");

                entity.Property(e => e.ElectricityAndWaterBill).HasDefaultValueSql("((0))");

                entity.Property(e => e.IncomeTaxes).HasDefaultValueSql("((0))");

                entity.Property(e => e.InternetAndPhoneBill).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManageFee).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.NumberOfTurns).HasDefaultValueSql("((0))");

                entity.Property(e => e.OfficeRentAndServiceCose).HasDefaultValueSql("((0))");

                entity.Property(e => e.OfficeStaffSalary).HasDefaultValueSql("((0))");

                entity.Property(e => e.OfficeStaffSocialInsurance).HasDefaultValueSql("((0))");

                entity.Property(e => e.RentWithTax).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalaryServicePerServiceIncome).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalesSalary).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalonFee).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalonUnplannedSpending).HasDefaultValueSql("((0))");

                entity.Property(e => e.ShippingExpend).HasDefaultValueSql("((0))");

                entity.Property(e => e.ShortName).IsFixedLength();

                entity.Property(e => e.SocialInsuranceAndFixedCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.Tax).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalDailyCostInventory).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalIncomeAfterTax).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalPayOffKcs).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalProductCapital).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalProductPerCus).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalServicePerCus).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalSmsexpenses).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalTransactionPerCus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UnplannedSpending).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StaticExpenseV2>(entity =>
            {
                entity.Property(e => e.CapitalSpending).HasDefaultValueSql("((0))");

                entity.Property(e => e.Compensation).HasDefaultValueSql("((0))");

                entity.Property(e => e.DirectFee).HasDefaultValueSql("((0))");

                entity.Property(e => e.ElectricityAndWaterBill).HasDefaultValueSql("((0))");

                entity.Property(e => e.IncomeTaxes).HasDefaultValueSql("((0))");

                entity.Property(e => e.InternetAndPhoneBill).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManageFee).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.NumberOfTurns).HasDefaultValueSql("((0))");

                entity.Property(e => e.OfficeRentAndServiceCose).HasDefaultValueSql("((0))");

                entity.Property(e => e.OfficeStaffSalary).HasDefaultValueSql("((0))");

                entity.Property(e => e.OfficeStaffSocialInsurance).HasDefaultValueSql("((0))");

                entity.Property(e => e.RentWithTax).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalaryServicePerServiceIncome).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalesSalary).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalonFee).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalonUnplannedSpending).HasDefaultValueSql("((0))");

                entity.Property(e => e.ShippingExpend).HasDefaultValueSql("((0))");

                entity.Property(e => e.ShortName).IsFixedLength();

                entity.Property(e => e.SocialInsuranceAndFixedCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.Tax).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalDailyCostInventory).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalIncomeAfterTax).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalPayOffKcs).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalProductCapital).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalProductPerCus).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalServicePerCus).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalSmsexpenses).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalTransactionPerCus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UnplannedSpending).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StaticOperate>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaticRatingWaitTime>(entity =>
            {
                entity.HasIndex(e => new { e.StaffId, e.Star1, e.Star2, e.Star3, e.Star4, e.Star5, e.SpeedCut, e.BillNotImages, e.BillErrors, e.Before15p, e.Between15pAnd20p, e.After20p, e.NotTime, e.TotalShinecombo, e.TotalBillService, e.IsDelete, e.StaffType, e.WorkDate })
                    .HasName("IDX_20180715_693_692_Solution_30shinedboStaticRatingWaitTime");

                entity.HasIndex(e => new { e.StaffId, e.Star1, e.Star2, e.Star3, e.Star4, e.Star5, e.SpeedCut, e.BillNotImages, e.BillErrors, e.Before15p, e.Between15pAnd20p, e.After20p, e.NotTime, e.TotalShinecombo, e.TotalBillService, e.WorkDate, e.IsDelete, e.StaffType })
                    .HasName("IDX_20180715_210_209_Solution_30shinedboStaticRatingWaitTime");

                entity.HasIndex(e => new { e.Id, e.BillGreat, e.BillGood, e.BillBad, e.Star1, e.Star2, e.Star3, e.Star4, e.Star5, e.Point, e.SpeedCut, e.RankingPoint, e.RankingSpeedCut, e.BillNotImages, e.BillErrors, e.Before15p, e.Between15pAnd20p, e.After20p, e.NotTime, e.CreatedDate, e.ModifiedDate, e.StaffType, e.TotalShinecombo, e.Uid, e.MigrateStatus, e.TotalBillService, e.StaffId, e.SalonId, e.WorkDate, e.IsDelete })
                    .HasName("IDX_7476157_7476156_Solution_30shinedboStaticRatingWaitTime");

                entity.HasIndex(e => new { e.Id, e.SalonId, e.BillGreat, e.BillGood, e.BillBad, e.Star1, e.Star2, e.Star3, e.Star4, e.Star5, e.Point, e.SpeedCut, e.RankingPoint, e.RankingSpeedCut, e.BillNotImages, e.BillErrors, e.Before15p, e.Between15pAnd20p, e.After20p, e.NotTime, e.CreatedDate, e.ModifiedDate, e.StaffType, e.TotalShinecombo, e.Uid, e.MigrateStatus, e.TotalBillService, e.StaffId, e.WorkDate, e.IsDelete })
                    .HasName("IDX_7471027_7471026_Solution_30shinedboStaticRatingWaitTime");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StaticServicesProfit>(entity =>
            {
                entity.HasIndex(e => e.WorkDate)
                    .HasName("IX_StaticServices_Profit_Workdate");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StatictisReportOperation>(entity =>
            {
                entity.Property(e => e.NumberBill1Star).HasComment("bill danh gia 1 sao");

                entity.Property(e => e.NumberBill2Star).HasComment("bill danh giá 2 sao");

                entity.Property(e => e.NumberBill3Star).HasComment("bill danh gia 3 sao");

                entity.Property(e => e.NumberBill4Star).HasComment("bill danh gia 4 sao");

                entity.Property(e => e.NumberBill5Star).HasComment("bill danh gia 5 sao");

                entity.Property(e => e.NumberBillKhl).HasComment("bill không hài lòng");

                entity.Property(e => e.NumberBillNotImg).HasComment("bill không ảnh");

                entity.Property(e => e.NumberBillWaited).HasComment("Bill Khach phai cho lau > 15 phút");

                entity.Property(e => e.NumberBooking).HasComment("khách dịch vụ đặt trước và checkout");

                entity.Property(e => e.NumberBookingBefor).HasComment("khách booking inline checkout");

                entity.Property(e => e.NumberCanleBooking).HasComment("Số lượng hủy book");

                entity.Property(e => e.NumberCustomerOld).HasComment("Số khách cũ");

                entity.Property(e => e.NumberDeleteBooking).HasComment("Số lượng xóa book");

                entity.Property(e => e.NumberErrorMonitoring).HasComment("Số lỗi giám sát");

                entity.Property(e => e.NumberOfTurns).HasComment("số bill dịch vụ");

                entity.Property(e => e.NumberSkinnerTimekeeping).HasComment("số lượng skinner chấm công");

                entity.Property(e => e.NumberSlotBooking).HasComment("tổng số slot được book");

                entity.Property(e => e.NumberStylist).HasComment("Số lượng stylist đi thuộc biên chế cty");

                entity.Property(e => e.NumberStylistTimekeeping).HasComment("số lượng stylist chấm công");

                entity.Property(e => e.OvertimeHoursStylist).HasComment("Số giờ tăng ca của stylist");

                entity.Property(e => e.SalonId).HasComment("Id của salon");

                entity.Property(e => e.SalonName).HasComment("Tên viết tắt của salon");

                entity.Property(e => e.TotalExFoliation).HasComment("tong so dich vu đắp mặt lạ");

                entity.Property(e => e.TotalGroupColorCombo).HasComment("tong so luong group Color ComBo ( Nhuộm )");

                entity.Property(e => e.TotalGroupUonDuoi).HasComment("tong so bill su dụng group uon + duoi");

                entity.Property(e => e.TotalIncome).HasComment("Tổng doanh thu của salon");

                entity.Property(e => e.TotalKidCombo).HasComment("tong bill dịch vụ Kid Combo");

                entity.Property(e => e.TotalMask).HasComment("tong so dich vu Tay Da Chet");

                entity.Property(e => e.TotalProductIncome).HasComment("tổng doanh thu mỹ phẩm");

                entity.Property(e => e.TotalProtein).HasComment("tong bill dich vu dưỡng Protein");

                entity.Property(e => e.TotalServiceInCome).HasComment("tổng doanh thu dịch vụ");

                entity.Property(e => e.TotalShineCombo).HasComment("tong so bill dich vu ShineCombo");

                entity.Property(e => e.TotalStarNumber).HasComment("tổng số sao đánh giá");

                entity.Property(e => e.WorktimeStylist).HasComment("số giờ làm việc của stylist");
            });

            modelBuilder.Entity<StatisticRating>(entity =>
            {
                entity.HasKey(e => new { e.StaffId, e.WorkDate, e.AnswerId })
                    .HasName("StatisticRating_PK");
            });

            modelBuilder.Entity<StatisticRevenue>(entity =>
            {
                entity.HasIndex(e => e.BillDate)
                    .HasName("StatisticRevenueBillDate");
            });

            modelBuilder.Entity<StatisticSalaryProduct>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.SalonId, e.ProductIds, e.Total, e.TotalMoney, e.CreatedTime, e.ModifiedTime, e.Uid, e.MigrateStatus, e.StaffId, e.IsDelete, e.WorkDate })
                    .HasName("IDX_20180715_23_22_Solution_30shinedboStatisticSalaryProduct");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StatisticSalaryService>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.SalonId, e.ServiceIds, e.Total, e.TotalMoney, e.CreatedTime, e.ModifiedTime, e.Uid, e.MigrateStatus, e.StaffId, e.IsDelete, e.WorkDate })
                    .HasName("IDX_20180715_15_14_Solution_30shinedboStatisticSalaryService");

                entity.HasIndex(e => new { e.Id, e.Total, e.TotalMoney, e.CreatedTime, e.ModifiedTime, e.IsDelete, e.Uid, e.MigrateStatus, e.StaffId, e.SalonId, e.ServiceIds, e.WorkDate })
                    .HasName("IDX_20180715_1236_1235_Solution_30shinedboStatisticSalaryService");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StatisticScscError>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SalonId).HasDefaultValueSql("((0))");

                entity.Property(e => e.StylistId).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongAnhLoiScsc).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongAnhMoScsc).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongAnhUon).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongBillUon).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongDiemScsc).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongErrorComplatetion).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongErrorHairRoots).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongErrorHairTip).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongErrorHairWaves).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongErrorShape).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongErrorSharpNess).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongKhongAnhScsc).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongKhongAnhUon).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongKhongMoScsc).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongLoiScscHoacUon).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongLoiUon).HasDefaultValueSql("((0))");

                entity.Property(e => e.TongMoLechUon).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StatisticServiceQualityStaff>(entity =>
            {
                entity.HasKey(e => new { e.StaffId, e.WorkDate })
                    .HasName("PK_StatisticQualityServiceStaff");
            });

            modelBuilder.Entity<StatisticsXuatVatTu>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.ExportGoodsId })
                    .HasName("PK_ID_ExportGoods_ID");

                entity.Property(e => e.Id)
                    .HasComment(@"ID : Tự tăng
")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ExportGoodsId).HasComment("0");

                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateXuatVatTu).HasComment("Ngày xuất vật tư");

                entity.Property(e => e.IsDelete)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Cập nhật trạng thái xóa hay không (1 là đã xóa ? 0 là chưa xóa).");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalonId)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Salon được xuất vật tư ");

                entity.Property(e => e.StaffId)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Nhân viên được xuất vật tư");

                entity.Property(e => e.TotalBillXuatVatTu)
                    .HasDefaultValueSql("((0))")
                    .HasComment("tổng bill trong lần xuất vâth tư");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StoreQrScan>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.MacAddress).IsUnicode(false);

                entity.Property(e => e.Salon).IsUnicode(false);

                entity.Property(e => e.ScanDateString).IsUnicode(false);
            });

            modelBuilder.Entity<StyleMaster>(entity =>
            {
                entity.HasIndex(e => new { e.PostNumber, e.IsDelete })
                    .HasName("IDX_20180718_1191_1190_Solution_30shinedboStyleMaster");

                entity.HasIndex(e => new { e.Id, e.PostNumber, e.StylistName, e.Image1, e.Image2, e.Image3, e.Image4, e.TotalLike, e.StyleMasterStatusId, e.IsDelete, e.ApproveTime })
                    .HasName("IDX_20180715_162229_162228_Solution_30shinedboStyleMaster");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.StyleMasterStatusId).HasDefaultValueSql("((2))");

                entity.Property(e => e.TotalLike).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UseCurling).HasDefaultValueSql("((0))");

                entity.Property(e => e.UseHairDye).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StyleMasterLog>(entity =>
            {
                entity.HasIndex(e => e.StaffId)
                    .HasName("IDX_976_975_Solution_30shinedboStyleMaster_Log");

                entity.HasIndex(e => new { e.StyleMasterId, e.PostNumber, e.CustomerId })
                    .HasName("IDX_5848_5847_Solution_30shinedboStyleMaster_Log");

                entity.HasIndex(e => new { e.Id, e.StyleMasterId, e.PostNumber, e.CustomerId })
                    .HasName("IDX_4_3_Solution_30shinedboStyleMaster_Log");

                entity.HasIndex(e => new { e.Id, e.StyleMasterId, e.PostNumber, e.StaffId })
                    .HasName("IDX_20180715_162227_162226_Solution_30shinedboStyleMaster_Log");

                entity.Property(e => e.CustomerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StyleMasterStatus>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenBillCutFree>(entity =>
            {
                entity.HasIndex(e => e.StudentId)
                    .HasName("IDX_20180715_51471_51470_Solution_30shinedboStylist4Men_BillCutFree");

                entity.HasIndex(e => new { e.Id, e.CreatedTime, e.UploadImageTime, e.HairStyleId, e.StudentId })
                    .HasName("IDX_20180715_51476_51475_Solution_30shinedboStylist4Men_BillCutFree");

                entity.HasIndex(e => new { e.Id, e.CustomerId, e.Images, e.CreatedTime, e.ModifiedTime, e.ClassId, e.ImageStatusId, e.ImageChecked1, e.ImageChecked2, e.ImageChecked3, e.ImageChecked4, e.ErrorNote, e.NoteByStylist, e.Uid, e.MigrateStatus, e.UploadImageTime, e.HairStyleId, e.StudentId, e.IsDelete })
                    .HasName("IDX_20180715_1867_1866_Solution_30shinedboStylist4Men_BillCutFree");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenClass>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasComment("Thời gian tạo bản ghi");

                entity.Property(e => e.GraduateTime).HasComment("Ngày tốt nghiệp (Hoàn thành khóa học)");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedTime).HasComment("Thời gian sửa lần gần nhất");

                entity.Property(e => e.Name).HasComment("Tên lớp học");

                entity.Property(e => e.Note).HasComment("Ghi chú");

                entity.Property(e => e.SalonId).HasComment("Trụ sở đào tạo (Sẽ ở 1 salon nào đó)");

                entity.Property(e => e.StartTime).HasComment("Ngày bắt đầu (Khai giảng)");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenCredits>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenCustomer>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenExamResult>(entity =>
            {
                entity.Property(e => e.IsPassPratice).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPassTheory).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Stylist4MenGraduationScore>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenPointClubs>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenStudent>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.Fullname, e.Email, e.ClassId, e.TotalAmountCollected, e.TotalAmountPaid, e.TotalBill, e.StudyPackageId, e.PointLtcat, e.Vote, e.PointTheoryCut, e.SalonId, e.StatusTuition, e.PointLtkn, e.IsDelete, e.IsAccept })
                    .HasName("IDX_20180718_124_123_Solution_30shinedboStylist4Men_Student");

                entity.Property(e => e.Address).HasComment("Địa chỉ cụ thể");

                entity.Property(e => e.CityId).HasComment("Thành phố ID");

                entity.Property(e => e.ClassId).HasComment("Class ID");

                entity.Property(e => e.CreatedTime).HasComment("Thời gian tạo bản ghi");

                entity.Property(e => e.DistrictId).HasComment("Quân/Huyện ID");

                entity.Property(e => e.Email).HasComment("Email (Hoặc tên đăng nhập)");

                entity.Property(e => e.Fullname).HasComment("Tên đầy đủ");

                entity.Property(e => e.Gender).HasComment("Giới tính : 1|Nam, 2|Nữ, 3|Khác");

                entity.Property(e => e.IsDelete).HasComment("True|Đánh dấu bản ghi sang trạng thái xóa");

                entity.Property(e => e.IsGraduate).HasComment("True | Đã tốt nghiệp, False | Chưa tốt nghiệp");

                entity.Property(e => e.IsHire).HasComment("True|Học viên được nhận làm nhân viên của 30Shine");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedTime).HasComment("Thời gian chỉnh sửa bản ghi lần cuối");

                entity.Property(e => e.Password).HasComment("Mật khẩu đăng nhập (App)");

                entity.Property(e => e.Phone).HasComment("Số điện thoại");

                entity.Property(e => e.Publish).HasComment("True|Xuất bản bản ghi, False|Không xuất bản bản ghi");

                entity.Property(e => e.SnDay).HasComment("Ngày sinh");

                entity.Property(e => e.SnMonth).HasComment("Tháng sinh");

                entity.Property(e => e.SnYear).HasComment("Năm sinh");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenStudyPackage>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Stylist4MenTuition>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StynextBill>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<StynextGroup>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.IsDeleted).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StynextGroupMember>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.IsDeleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsGroupLeader).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StynextKpiConfig>(entity =>
            {
                entity.Property(e => e.KpiName).IsUnicode(false);
            });

            modelBuilder.Entity<StynextLevelConfig>(entity =>
            {
                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<StynextLevelKpiConfig>(entity =>
            {
                entity.Property(e => e.KpiName).IsUnicode(false);
            });

            modelBuilder.Entity<StynextSalaryConfig>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<StynextStaticData>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.FixedSalary).HasDefaultValueSql("((0))");

                entity.Property(e => e.FixedSalaryTest).HasDefaultValueSql("((0))");

                entity.Property(e => e.GuaranteeServiceCommission).HasDefaultValueSql("((0))");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.OvertimeDayServiceRevenue).HasDefaultValueSql("((0))");

                entity.Property(e => e.OvertimeHourServiceRevenue).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductCommission).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductRevenue).HasDefaultValueSql("((0))");

                entity.Property(e => e.ServiceCommission).HasDefaultValueSql("((0))");

                entity.Property(e => e.ServiceRevenue).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StynextStaticProduct>(entity =>
            {
                entity.Property(e => e.ItemRevenue).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StynextStaticService>(entity =>
            {
                entity.Property(e => e.ItemRevenue).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SuKienTeam>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SuKienTeamStaff>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SurveyContent>(entity =>
            {
                entity.Property(e => e.CategoryId).HasComment("Danh mục khảo sát");

                entity.Property(e => e.Content).HasComment("Nội dung");

                entity.Property(e => e.IsQuestion).HasComment("Là câu hỏi hay câu trả lời : True | Câu hỏi, False | Câu trả lời");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SurveyFeedback>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<SurveyMapQa>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TargetHighlightSalons>(entity =>
            {
                entity.HasKey(e => new { e.SalonId, e.TargetHighlightCode })
                    .HasName("PK_Salon_TargetHighlight");

                entity.Property(e => e.TargetHighlightCode).IsUnicode(false);
            });

            modelBuilder.Entity<TargetHighlights>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("PK_TargetHighlight_1");

                entity.HasIndex(e => e.Code)
                    .HasName("UQ__TargetHi__A25C5AA7C9F36921")
                    .IsUnique();

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<TblCategory>(entity =>
            {
                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblCategoryBk20200424>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TblConfig>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblConfigWorkDays>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Publish).HasDefaultValueSql("((1))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblCusInputBooking>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblEmailReport>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblFormMisstake>(entity =>
            {
                entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPuslish).HasDefaultValueSql("((1))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Slug).IsUnicode(false);

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblGroupProduct>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblInformationStaffClub>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblListBack30Day>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblMedia>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPayon>(entity =>
            {
                entity.Property(e => e.BaseSalary).HasComment("Lương cứng");

                entity.Property(e => e.ForeignId).HasComment("Id bậc kỹ năng...");

                entity.Property(e => e.KeyId).HasComment("Id dịch vụ, sản phẩm...");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.PayByTime).HasComment("Cách tính lương cứng : 1 - Theo tháng | 2 - Theo ngày| 3 - Lương part-time | 4 -  Lương phụ cấp | 5 - Hệ số điểm hài lòng | 6 - Hệ số bill | 7 - Hệ số khách quay lại");

                entity.Property(e => e.TypeStaffId).HasComment("Bộ phận nhân viên Id...");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Value).HasComment("Giá trị trả cho nhân viên trên mỗi sản phẩm hoặc dịch vụ");
            });

            modelBuilder.Entity<TblPermission>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPermissionAction>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPermissionDefaultPage>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPermissionMap>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPermissionMapV2>(entity =>
            {
                entity.Property(e => e.AStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPermissionMenu>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPermissionMenuV2>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPermissionSalonArea>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblPermissionStaffRoles>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblSalon>(entity =>
            {
                entity.HasIndex(e => new { e.ShortName, e.IsSalonHoiQuan, e.Id })
                    .HasName("_dta_index_Tbl_Salon_9_1069558123__K25_K1_24");

                entity.HasIndex(e => new { e.Name, e.Publish, e.IsDelete, e.Id })
                    .HasName("_dta_index_Tbl_Salon_9_1069558123__K14_K15_K1_2");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblSkillLevel>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblStaffOfClubInformation>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblStaffSurvey>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblStatus>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblTemp>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TblTesst>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TeamService>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TimekeepingQueueInfo>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.MessageContent).IsUnicode(false);

                entity.Property(e => e.MessageId).IsUnicode(false);
            });

            modelBuilder.Entity<TimekeepingSuggestionStaticData>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.IsDeleted).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TinhThanh>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TopSalary>(entity =>
            {
                entity.Property(e => e.DepartmentId).HasComment("Id bộ phận");

                entity.Property(e => e.Month).HasComment("tháng");

                entity.Property(e => e.Salary).HasComment("Lương");

                entity.Property(e => e.SalonName).HasComment("Tên salon");

                entity.Property(e => e.SkillLevel).HasComment("level");

                entity.Property(e => e.StaffId).HasComment("Id của nhân viên");

                entity.Property(e => e.StaffName).HasComment("Tên nhân viên");

                entity.Property(e => e.Year).HasComment("năm");
            });

            modelBuilder.Entity<TrackingWebData>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TrackingWebDataV2>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.Value, e.SalonId, e.Phone, e.HourId, e.CusNote1, e.CusNote2, e.SalonNote, e.TimeSalonNote, e.TrackDate })
                    .HasName("IDX_20180715_26331_26330_Solution_30shinedboTrackingWeb_DataV2");

                entity.HasIndex(e => new { e.Id, e.EventId, e.Value, e.CreatedTime, e.TokenKey, e.Meta, e.VersionId, e.Counting, e.StylistId, e.TrackDate, e.SalonId, e.Phone, e.HourId, e.CountFrames, e.CusNote1, e.CusNote2, e.Device, e.SalonNote, e.TimeSalonNote, e.PopupSalonStatis, e.PopupStylistStatis, e.IdsalonBackUp, e.IdstylistBackUp, e.VersionWeb, e.Uid, e.MigrateStatus, e.BookingId })
                    .HasName("IDX_20180718_20_19_Solution_30shinedboTrackingWeb_DataV2");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.VersionWeb).IsUnicode(false);
            });

            modelBuilder.Entity<TrackingWebDataV22017>(entity =>
            {
                entity.Property(e => e.VersionWeb).IsUnicode(false);
            });

            modelBuilder.Entity<TrackingWebEvent>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TuyenDungDanhGia>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TuyenDungNguoiTest>(entity =>
            {
                entity.Property(e => e.Email).IsFixedLength();

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Telephone).IsFixedLength();

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TuyenDungNguon>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TuyenDungSkill>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TuyenDungSkillLevel>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TuyenDungSkillLevelMap>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TuyenDungStatus>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TuyenDungUngVien>(entity =>
            {
                entity.HasIndex(e => new { e.Id, e.FullName, e.Phone, e.DepartmentId, e.IsDelete, e.UngVienStatusId })
                    .HasName("IDX_20180718_515_514_Solution_30shinedboTuyenDung_UngVien");

                entity.HasIndex(e => new { e.Id, e.FullName, e.Phone, e.DepartmentId, e.UngVienStatusId, e.Step1Time, e.IsDelete })
                    .HasName("IDX_20180719_5031_5030_Solution_30shinedboTuyenDung_UngVien");

                entity.HasIndex(e => new { e.Id, e.FullName, e.Phone, e.DepartmentId, e.UngVienStatusId, e.SalonId, e.StaffId, e.IsDelete, e.Step1Time })
                    .HasName("IDX_20180719_5006_5005_Solution_30shinedboTuyenDung_UngVien");

                entity.Property(e => e.Cmt).HasComment("Số Chứng Minh Thư");

                entity.Property(e => e.Cmtimg1).HasComment("Ảnh CMT 1");

                entity.Property(e => e.Cmtimg2).HasComment("Ảnh CMT2");

                entity.Property(e => e.ImgSkill1).HasComment("Ảnh kỹ năng");

                entity.Property(e => e.ImgSkill2).HasComment("Ảnh kỹ năng");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Step1Time).HasComment("Thời gian tạo hồ sơ ứng viên, cũng chính là bước 1");

                entity.Property(e => e.Step2Time).HasComment("Thời gian cập nhật ở bước 2, là bước nhập ảnh, link video");

                entity.Property(e => e.StepEndTime).HasComment("Bước cuối cùng, duyệt ứng viên");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.VideoLink).HasComment("Link video kỹ năng, có thể là link youtube");
            });

            modelBuilder.Entity<TypeErrorSpecailCus>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Users1>(entity =>
            {
                entity.HasIndex(e => e.StaffId)
                    .HasName("IDX_9_8_Solution_30shinedboUsers");

                entity.HasIndex(e => new { e.IsDelete, e.StaffId })
                    .HasName("IDX_13_12_Solution_30shinedboUsers");

                entity.HasIndex(e => new { e.Username, e.IsActive, e.IsDelete })
                    .HasName("IDX_211_210_Solution_30shinedboUsers");

                entity.HasIndex(e => new { e.Username, e.StaffId, e.IsActive, e.IsDelete })
                    .HasName("IDX_2141_2140_Solution_30shinedboUsers");

                entity.HasIndex(e => new { e.UserId, e.Username, e.Password, e.LastPassword, e.LastLogin, e.FirstLogin, e.LastChangePassword, e.TimeLivePassword, e.CreatedDate, e.ModifiedDate, e.Valid2Fa, e.Email, e.Phone, e.OtpChangePass, e.RequiredValid2Fa, e.IsActive, e.IsDelete, e.StaffId })
                    .HasName("IDX_11_10_Solution_30shinedboUsers");

                entity.Property(e => e.FirstLogin).HasDefaultValueSql("((0))");

                entity.Property(e => e.RequiredValid2Fa).HasDefaultValueSql("((1))");

                entity.Property(e => e.Valid2Fa).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Vietnam>(entity =>
            {
                entity.HasIndex(e => e.DistrictId)
                    .HasName("IDX_4155525_4155524_Solution_30shinedboVietnam");

                entity.HasIndex(e => e.WardId)
                    .HasName("IDX_13_12_Solution_30shinedboVietnam");

                entity.HasIndex(e => new { e.District, e.DistrictId, e.CityId })
                    .HasName("IDX_4155508_4155507_Solution_30shinedboVietnam");
            });

            modelBuilder.Entity<WorkTime>(entity =>
            {
                entity.Property(e => e.AllowOt).HasDefaultValueSql("((0))");

                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<WorkflowFile>(entity =>
            {
                entity.Property(e => e.MigrateStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid).HasDefaultValueSql("(newid())");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}